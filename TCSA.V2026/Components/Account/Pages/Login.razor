@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using TCSA.V2026.Data
@using TCSA.V2026.Data.Models

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<MudGrid Class="pa-5">
    <MudItem md="4">
        <MudGrid Class="pr-5">
            <MudItem md="12">
                <StatusMessage Message="@errorMessage" />
                <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                    <DataAnnotationsValidator />

                    <MudText GutterBottom="true" Typo="Typo.body1">Login with email and password</MudText>

                    <MudGrid>
                        <MudItem md="12">
                            <MudStaticTextField For="@(() => Input.Email)" @bind-Value="Input.Email"
                                                Label="Email" Placeholder="name@example.com"
                                                UserAttributes="@(new() { { "autocomplete", "username" }, { "aria-required", "true" } } )" />
                        </MudItem>
                        <MudItem md="12">
                            <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                                                Label="Password" InputType="InputType.Password" Placeholder="password"
                                                UserAttributes="@(new() { { "autocomplete", "current-password" }, { "aria-required", "true" } } )" />
                        </MudItem>
                        <MudItem md="12">
                            <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">Log in</MudStaticButton>
                        </MudItem>
                    </MudGrid>
                </EditForm>

                <MudGrid>
                    <MudItem md="12">
                        <MudLink 
                            Class="d-flex justify-center mt-3" 
                            Href="/Account/ForgotPassword">Forgot your password?</MudLink><br />
                        <MudLink 
                            Style="margin-top: -20px;"
                            Class="d-flex justify-center" 
                            Href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Don't have an account? Register.</MudLink>
                            <br />
                    </MudItem>
                </MudGrid>
            </MudItem>

            <MudItem md="12" Class="d-flex justify-center align-center">
                <MudText GutterBottom="true" Typo="Typo.h6">OR</MudText>
            </MudItem>

            <MudItem md="12" Class="d-flex justify-center">
                <MudGrid>
                    <MudItem md="12" Class="d-flex justify-center align-center">
                        <MudText GutterBottom="true" Typo="Typo.body1">Login with your Github Account</MudText>
                    </MudItem>
                    <MudItem md="12" Class="d-flex justify-center align-center">
                        <ExternalLoginPicker />
                    </MudItem>
                </MudGrid>
            </MudItem>
        </MudGrid>
    </MudItem>
    <MudItem md="8" Class="flex-grow-1 d-flex align-center justify-center no-scroll">
       @*  <MudText Typo="Typo.h4" Class="text-white">Welcome to the Dashboard</MudText> *@
    </MudItem>
</MudGrid>

<script src="js/theme-toggle.js"></script>
<script>
    window.addEventListener('DOMContentLoaded', () => {
        window.initializeThemeToggle?.();
    });
</script>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, true, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
