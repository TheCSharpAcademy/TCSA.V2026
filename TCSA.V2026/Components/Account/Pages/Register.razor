@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using TCSA.V2026.Data
@using TCSA.V2026.Data.Models
@using TCSA.V2026.Helpers
@using TCSA.V2026.Services

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject ICustomEmailSender EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject AuthenticationStateProvider AuthenticationState 
@inject NavigationManager Navigation

<PageTitle>Register</PageTitle>

<MudStack Class="pa-5" Row Breakpoint="Breakpoint.Xs" Justify="Justify.Center" Spacing="10" AlignItems="AlignItems.Center">
    <MudStack Spacing="4">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <MudStack Spacing="4">
                <DataAnnotationsValidator />
                <MudText Typo="Typo.body1" GutterBottom="true">Create a new account with e-mail and password</MudText>
                <MudStaticTextField For="@(() => Input.DisplayName)" @bind-Value="Input.DisplayName"
                                    Label="DisplayName" Placeholder="display name"
                                    UserAttributes="@(new() { { "autocomplete", "displayname" }, { "aria-required", "true" } } )" />
                <MudStaticTextField For="@(() => Input.Email)" @bind-Value="Input.Email"
                                    Label="Email" Placeholder="name@example.com"
                                    UserAttributes="@(new() { { "autocomplete", "username" }, { "aria-required", "true" } } )" />
                <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                                    Label="Password" InputType="InputType.Password" Placeholder="password"
                                    UserAttributes="@(new() { { "autocomplete", "new-password" }, { "aria-required", "true" } } )" />
                <MudStaticTextField For="@(() => Input.ConfirmPassword)" @bind-Value="Input.ConfirmPassword"
                                    Label="Confirm Password" InputType="InputType.Password" Placeholder="confirm password"
                                    UserAttributes="@(new() { { "autocomplete", "new-password" }, { "aria-required", "true" } } )" />
                <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">Register</MudStaticButton>
            </MudStack>
        </EditForm>
    </MudStack>
    <MudText GutterBottom="true" Typo="Typo.h6">OR</MudText>
    <MudStack Spacing="4" Justify="Justify.Center">
        <MudText GutterBottom="true" Typo="Typo.body1">Register with your Github Account</MudText>
        <div class="d-flex justify-center">
            <ExternalLoginPicker />
        </div>
    </MudStack>
</MudStack>

<script src="js/theme-toggle.js"></script>
<script>
    window.addEventListener('DOMContentLoaded', () => {
        window.initializeThemeToggle?.();
    });
</script>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private List<string> Countries = new();

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override async Task OnInitializedAsync()
    {
        Countries = FlagHelper.GetCountries();
        var AuthSate = await AuthenticationState.GetAuthenticationStateAsync();

        if (AuthSate.User.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo($"Dashboard", forceLoad: true);
        }
        else
        {
            return;
        }
    }

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        user.Country = string.Empty;
        user.FirstName = string.Empty;
        user.LastName = string.Empty;
        user.DisplayName = Input.DisplayName;
        user.Level = Level.White;
        user.CreatedDate = DateTime.UtcNow;

        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        // var userId = await UserManager.GetUserIdAsync(user);
        // var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        // code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        // var callbackUrl = NavigationManager.GetUriWithQueryParameters(
        //     NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
        //     new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        // await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        // if (UserManager.Options.SignIn.RequireConfirmedAccount)
        // {
        //     RedirectManager.RedirectTo(
        //         "Account/RegisterConfirmation",
        //         new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        // }

        await SignInManager.SignInAsync(user, isPersistent: true);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private static ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(20, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 3)]
        [Display(Name = "Display Name")]
        public string DisplayName { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
