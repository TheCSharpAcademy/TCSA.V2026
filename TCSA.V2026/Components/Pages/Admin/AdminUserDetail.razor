@page "/admin/{UserId}"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity.UI.Services
@using TCSA.V2026.Components.UI
@using TCSA.V2026.Data.Curriculum
@using TCSA.V2026.Data.DTOs
@using TCSA.V2026.Data.Models
@using TCSA.V2026.Data.Models.Responses
@using TCSA.V2026.Helpers
@using TCSA.V2026.Services

<MudDialogProvider />
<MudSnackbarProvider />
@inject IDialogService DialogService

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@attribute [Authorize(Roles = "Admin")]

<MudContainer>
    <AdminToolBar></AdminToolBar>

    @if (IsLoading || User == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        <MudGrid Class="mt-1">
            <MudItem xs="6">
                <MudPaper Class="mb-5" Elevation="4">
                    <MudList T="string" Dense="true">
                        <MudListItem Text="@loadTime.TotalSeconds.ToString()" Icon="@Icons.Material.Filled.PunchClock" IconColor="Color.Primary" />
                        <MudListItem Text="@User.Id.ToString()" Icon="@Icons.Material.Filled.PermIdentity" IconColor="Color.Primary" />
                        <MudListItem Text="@User.DisplayName" Icon="@Icons.Material.Filled.CardMembership" IconColor="Color.Primary" />
                        <MudListItem Text="@User.Country" Icon="@Icons.Material.Filled.Map" IconColor="Color.Primary" />
                        <MudListItem Text="@User.ExperiencePoints.ToString()" Icon="@Icons.Material.Filled.Score" IconColor="Color.Primary" />
                        <MudListItem Text="@(User.FirstName + User.LastName)" Icon="@Icons.Material.Filled.CardTravel" IconColor="Color.Primary" />
                        <MudListItem Text="@User.Email" Icon="@Icons.Material.Filled.Email" IconColor="Color.Primary" />
                        <MudListItem Text="@User.GithubUsername" Icon="@Icons.Custom.Brands.GitHub" IconColor="Color.Primary" />
                        <MudListItem Text="@User.DiscordAlias" Icon="@Icons.Custom.Brands.Discord" IconColor="Color.Primary" />
                        <MudListItem Text="@User.Level.ToString()" Icon="@Icons.Material.Filled.Leaderboard" IconColor="Color.Primary" />
                        <MudListItem Text="@User.EmailConfirmed.ToString()" Icon="@Icons.Material.Filled.ThumbUp" IconColor="Color.Primary" />
                        <MudListItem Text="@(User.CodeReviewProjects?.Count.ToString())" Icon="@Icons.Material.Filled.Reviews" IconColor="Color.Primary" />
                        <MudListItem Text="@(User.Issues?.Count.ToString())" Icon="@Icons.Material.Filled.People" IconColor="Color.Primary" />
                    </MudList>
                </MudPaper>
            </MudItem>
            <MudItem xs="6">
                <MudText>LALALALALAL</MudText>
            </MudItem>
        </MudGrid>

        <MudPaper Class="pa-4 mb-5" Elevation="4">
            <MudSelect T="ProjectType?" Label="Filter by Project Type" @bind-Value="SelectedProjectType" Class="my-2" Dense="true" Clearable="true">
                <MudSelectItem T="ProjectType?" Value="null">All</MudSelectItem>
                @foreach (var type in Enum.GetValues<ProjectType>())
                {
                    <MudSelectItem T="ProjectType?" Value="@type">@type.ToString()</MudSelectItem>
                }
            </MudSelect>
            <MudCheckBox Label="Show Pending"
            CheckedIcon="@Icons.Material.Outlined.CheckBox"
            UncheckedIcon="@Icons.Material.Outlined.CheckBoxOutlineBlank"
            Value="@_showPending"
            ValueChanged="@((bool value) => Mama(value))" />

        </MudPaper>

        <MudDataGrid Class="pa-4" Elevation="4" Dense="true" Items="@FilteredActivity.Where(x => !_showPending || !x.IsPending)">
            <Columns>
                <PropertyColumn Property="fa => fa.ProjectId" Title="Id" />
                <PropertyColumn Property="fa => fa.Title" Title="Name" />
                <PropertyColumn Property="fa => fa.IsCompleted" Title="Status" />
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudStack Row>
                            @if (!context.Item.IsCompleted)
                            {
                                <MudButton Size="@Size.Small"
                                           Variant="@Variant.Filled"
                                           Color="@Color.Primary"
                                           OnClick="@(() => ProcessProjectCompleted(context.Item))">
                                    Mark
                                </MudButton>
                                <MudButton Size="@Size.Small"
                                           Variant="@Variant.Filled"
                                           Color="@Color.Error"
                                           OnClick="@(() => OpenConfirmationDialog(context.Item.DashboardProjectId.Value))"
                                           StartIcon="fas fa-eye">
                                    Delete
                                </MudButton>
                                <MudButton Size="@Size.Small"
                                           Variant="@Variant.Filled"
                                           Color="@Color.Warning"
                                           OnClick="@(() => JS.InvokeVoidAsync("window.open", context.Item.GithubUrl, "_blank", "noopener,noreferrer"))"
                                           StartIcon="fas fa-eye">
                                    View
                                </MudButton>
                            }
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    }
</MudContainer>

@code {
    [Parameter] public string UserId { get; set; }
    [Inject] private NavigationManager Navigation { get; set; }
    [Inject] protected IUserService UserService { get; set; }
    [Inject] protected IProjectService ProjectService { get; set; }
    [Inject] protected ICommunityService CommunityService { get; set; }
    [Inject] protected IAdminService AdminService { get; set; }
    [Inject] protected ILeaderboardService LeaderboardService { get; set; }
    [Inject] protected IPeerReviewService PeerReviewService { get; set; }
    [Inject] protected IEmailSender EmailSender { get; set; }

    [Inject] private IJSRuntime JS { get; set; }
    [Inject] private ISnackbar Snackbar { get; set; }

    private bool _showPending = false;

    private ProjectType? _selectedProjectType = null;
    private ProjectType? SelectedProjectType
    {
        get => _selectedProjectType;
        set
        {
            if (_selectedProjectType != value)
            {
                _selectedProjectType = value;
                FilterProjectType();
            }
        }
    }

    private ApplicationUser User;

    private List<Project>? Projects;
    private List<Article>? Articles;
    private List<AdminActivity> FilteredActivity = new();
    private List<AdminActivity> AllAdminActivity = new();
    private Level BeltShouldBe = Level.White;

    private bool IsLoading = true;
    private int XPSum = 0;
    private int ranking = 0;
    private TimeSpan loadTime;

    private async Task Mama(bool value)
    {
        if (value is bool boolValue) 
        {
            if (boolValue)
            {
                FilteredActivity = AllAdminActivity.Where(x => x.IsCompleted == false).ToList();
            } 
            else
            {
                FilteredActivity = AllAdminActivity;
            }
        }
        _showPending = !_showPending;
    }


    private void FilterProjectType()
    {
        if (SelectedProjectType is null)
        {
            FilteredActivity = AllAdminActivity;
        }
        else
        {
            FilteredActivity = AllAdminActivity?.Where(x => x.ProjectType == SelectedProjectType.Value).ToList();
        }


        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        Projects = ProjectHelper.GetProjects();
        Articles = ArticleHelper.GetArticles().ToList();
        var courseArticles = CourseHelper.GetCourses().SelectMany(x => x.Articles).ToList();
        Articles.AddRange(courseArticles);
        var startTime = DateTime.UtcNow;

        User = await AdminService.GetUserForAdmin(UserId);

        loadTime = DateTime.UtcNow - startTime;

        await GetXPSum();
        await LoadAdminActivity();
        IsLoading = false;
    }

    private async Task LoadAdminActivity()
    {
        var courseArticles = CourseHelper.GetCourses().SelectMany(x => x.Articles).ToList();
        var courseArticlesIds = courseArticles.Select(x => x.Id).ToList();
        var articlesIds = Articles.Select(x => x.Id).ToList();
        var reviews = await PeerReviewService.GetCodeReviewDetails(UserId);
        var issues = User.Issues?.Select(i => new AdminActivity
            {
                ProjectId = i.ProjectId,
                ProjectType = ProjectType.Issue,
                Title = i.Title,
                IsCompleted = i.IsClosed,
                GithubUrl = i.GithubUrl
            }).ToList() ?? new();

        var reviewsForAdmin = reviews.Select(i => new AdminActivity
            {
                ProjectId = i.ProjectId,
                ProjectType = ProjectType.CodeReview,
                Title = Projects.FirstOrDefault(x => x.Id == i.ProjectId).Title,
                IsCompleted = i.IsCompleted,
                GithubUrl = i.GithubUrl
            }).ToList() ?? new();

        var courseArticlesForAdmin = User.DashboardProjects
            .Where(dp => courseArticlesIds.Contains(dp.ProjectId))
            .OrderBy(dp => dp.IsCompleted)
            .ThenByDescending(x => x.DateSubmitted)
            .Select(i => new AdminActivity
                {
                    ProjectId = i.ProjectId,
                    ProjectType = ProjectType.CourseArticle,
                    Title = courseArticles.FirstOrDefault(x => x.Id == i.ProjectId).Title,
                    IsCompleted = i.IsCompleted
                })
            .ToList();

        var articlesForAdmin = User.DashboardProjects
            .Where(dp => !courseArticlesIds.Contains(dp.ProjectId) && articlesIds.Contains(dp.ProjectId))
            .OrderBy(dp => dp.IsCompleted)
            .ThenByDescending(x => x.DateSubmitted)
            .Select(i => new AdminActivity
                {
                    ProjectId = i.ProjectId,
                    ProjectType = ProjectType.Article,
                    Title = Articles.FirstOrDefault(x => x.Id == i.ProjectId).Title,
                    IsCompleted = i.IsCompleted
                })
            .ToList();

        var projectsForAdmin = User.DashboardProjects
            .Where(dp => !courseArticlesIds.Contains(dp.ProjectId) && !articlesIds.Contains(dp.ProjectId))
            .OrderBy(dp => dp.IsCompleted)
            .ThenByDescending(x => x.DateSubmitted)
            .Select(i => new AdminActivity
            {
                ProjectId = i.ProjectId,
                ProjectType = ProjectType.Project,
                Title = Projects.FirstOrDefault(x => x.Id == i.ProjectId)?.Title ?? "Dunno",
                IsCompleted = i.IsCompleted,
                DashboardProjectId = User.DashboardProjects.FirstOrDefault(dp => dp.ProjectId == i.ProjectId).Id,
                    GithubUrl = User.DashboardProjects.FirstOrDefault(dp => dp.ProjectId == i.ProjectId).GithubUrl
            })
            .ToList();

        AllAdminActivity.AddRange(articlesForAdmin);
        AllAdminActivity.AddRange(projectsForAdmin);
        AllAdminActivity.AddRange(issues);
        AllAdminActivity.AddRange(reviewsForAdmin);
        AllAdminActivity.AddRange(courseArticlesForAdmin);

        FilteredActivity = AllAdminActivity;

        // if (_showPending)
        // {
        //     FilteredActivity = AllAdminActivity.Where(x => x.IsCompleted == false).ToList();
        // }
    }

    private string GetTitle(int projectId)
    {
        var project = DashboardProjectsHelpers.GetProject(projectId);

        return project == null ? User.Issues.FirstOrDefault(x => x.ProjectId == projectId).Title : project.Title;
    }

    private async Task OpenConfirmationDialog(int dbProjectId)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        var dialog = await DialogService.ShowAsync<TCSADialog>("Are you Sure?", options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var apiResult = await ProjectService.DeleteProject(dbProjectId, UserId);

            if (apiResult.Status == ResponseStatus.Success)
            {
                Snackbar.Add("Project deleted  successfully!", Severity.Success);
                User = await AdminService.GetUserForAdmin(UserId);
            }
            else
            {
                Snackbar.Add($"Error: {apiResult.Message}", Severity.Error);
            }
        }
        else 
        {
            Console.WriteLine("lala");
        }
    }

    private async Task ProcessProjectCompleted(AdminActivity adminActivity)
    {
        string projectTitle = string.Empty;
        var project = Projects.FirstOrDefault(x => x.Id == adminActivity.ProjectId);

        if (project == null)
        {
            var issue = await CommunityService.GetIssueByProjectId(adminActivity.ProjectId.Value);
            projectTitle = issue.Title;
        }
        else
        {
            projectTitle = project.Title;
        }

        var rankingText = await LeaderboardService.GetUserRanking(UserId);
        var rankingWithSuffix = LeaderboardHelper.GetRanking(rankingText);

        var firstName = User.FirstName ??= string.Empty;

        var projectExperiencePoints =
            project != null
            ? project.ExperiencePoints
            : User.Issues.Single(x => x.ProjectId == adminActivity.ProjectId).ExperiencePoints;

        var body = EmailHelper.GetProjectCompletedBody(firstName, projectTitle, projectExperiencePoints, rankingWithSuffix.ToString());

        var result = await ProjectService.MarkAsCompleted(adminActivity.DashboardProjectId.Value);

        if (result.Status == ResponseStatus.Success)
        {
            Snackbar.Add("Project marked!", Severity.Success);
            User = await UserService.GetUserById(UserId);
        }
        else
        {
            Snackbar.Add($"Error: {result.Message}", Severity.Error);
        }

        User = await UserService.GetUserById(UserId);

        await EmailSender.SendEmailAsync(User.Email, "Your Project Was Marked as Complete", body);
    }

    private async Task GetXPSum()
    {
        var ids = new List<int>();

        var projectIds = User.DashboardProjects?
           .Where(x => x.IsCompleted)
           .Select(x => x.ProjectId)
           .ToList();

        if (projectIds != null)
        {
            ids.AddRange(projectIds);
        }

        // if (User.CodeReviewProjects != null)
        // {
        //     CodeReviews = await PeerReviewService.GetCodeReviewDetails(UserId);
        // }

        // if (CodeReviews != null)
        // {
        //     var reviewIds = CodeReviews
        //   .Where(x => x.IsCompleted)
        //   .Select(x => x.ProjectId)
        //   .ToList();

        //     ids.AddRange(reviewIds);
        // }

        foreach (int id in ids)
        {
            if (Projects.Any(x => x.Id == id))
            {
                XPSum = Projects.Single(x => x.Id == id).ExperiencePoints + XPSum;
            }
            else if (Articles.Any(x => x.Id == id))
            {
                XPSum = Articles.Single(x => x.Id == id).ExperiencePoints + XPSum;
            }
            else
            {
                XPSum = User.Issues.Single(x => x.ProjectId == id).ExperiencePoints + XPSum;
            }
        }
    }
}
