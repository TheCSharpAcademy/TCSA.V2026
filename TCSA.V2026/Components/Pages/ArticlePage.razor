@page "/article/{ArticleId:int}/{ArticleSlug}"
@using System.Security.Claims
@using TCSA.V2026.Data.Curriculum
@using TCSA.V2026.Data.Models
@using TCSA.V2026.Services

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@{
    int blockIndex = 0;
}

<PageTitle>@Article.Title</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large">
    <MudPaper Class="jumbotron d-flex align-center justify-center mt-3" Style=@GetBanner()>
        <h1 class="mud-typography-h3 text-white mud-typography-align-center py-4 px-4 px-md-10">@Article.Title</h1>
    </MudPaper>
    @if (IsLoading)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }

    @if (IsLoggedIn && IsCompleted)
    {
        <MudAlert Class="mt-5" Severity="Severity.Success" Elevation="2">You have completed this roadmap step.</MudAlert>
    }

    <MudGrid Class="mt-1">
        <MudItem xs="12">
            <MudPaper Class="d-flex flex-column mud-width-full py-1 pb-10 px-4 px-md-10">
                @foreach (var block in Article.Blocks)
                {
                    if (!string.IsNullOrWhiteSpace(block.Title))
                    {
                        <h2 class="mud-typography-h6 mt-10 mb-2">@block.Title</h2>
                    }

                    @foreach (var paragraph in block.Paragraphs)
                    {
                        if (paragraph.IsPicture)
                        {
                            <MudPaper Class="d-flex justify-center mx-20 mt-10 " Elevation="0">
                                <MudImage Src="@GetImage(paragraph)" Alt="Image paragraph" Fluid="true" Class="rounded-lg" />
                            </MudPaper>
                        }

                        else if (paragraph.IsVideo)
                        {
                            <div class="video-wrapper mt-3 mb-4">
                                <iframe class="video-iframe" src="@paragraph.VideoUrl" allowfullscreen></iframe>
                            </div>
                        }

                        else if (paragraph.IsCode)
                        {
                            <pre class="line-numbers"><code class="language-csharp">@((MarkupString)paragraph.Body)</code></pre>
                        }

                        else if (!string.IsNullOrEmpty(paragraph.Body))
                        {
                            if (!string.IsNullOrWhiteSpace(paragraph.BackgroundColor))
                            {
                                var bgStyle = $"background-color: {paragraph.BackgroundColor}; padding: 1rem;";
                                var textStyle = $"color: {paragraph.FontColor};";

                                <MudPaper Style="@bgStyle" Elevation="1" Class="my-2">
                                    <MudText Style="@textStyle" Typo="Typo.body1">
                                        @((MarkupString)paragraph.Body)
                                    </MudText>
                                </MudPaper>
                            }
                            else
                            {
                                <MudText Class="mt-2 mb-5" Typo="Typo.body1">
                                    @((MarkupString)paragraph.Body)
                                </MudText>
                            }
                        }
                    }
                }
            </MudPaper>
        </MudItem>
    </MudGrid>

    @if (IsLoggedIn && !IsCompleted)
    {
        <div class="d-flex justify-center my-5">
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       OnClick="MarkAsRead"
                       Disabled="IsSubmitting"
                       Loading="IsSubmitting">
                Mark as Read
            </MudButton>
        </div>
    }

</MudContainer>

@code {
    [Inject] private AuthenticationStateProvider AuthenticationState { get; set; }
    [Inject] private IProjectService ProjectService { get; set; }
    [Inject] private IJSRuntime JS { get; set; }
    [Inject] private ISnackbar SnackbarService { get; set; }

    [Parameter] public string ArticleSlug { get; set; }
    [Parameter] public int ArticleId { get; set; }

    private Article Article { get; set; }

    private bool IsLoggedIn = false;
    private bool HasNext = false;
    private bool IsCompleted = false;
    private bool IsLoading = true;
    private bool IsSubmitting = false;
    private string UserId = string.Empty;
    private string BackgroundImage;

    protected async override Task OnInitializedAsync()
    {
        await OnParametersSetAsync();
    }

    private string GetBanner()
    {
        var banner = string.IsNullOrEmpty(Article.BannerUrl) ? "article-banner.jpg" : Article.BannerUrl;
        return $"min-height: 250px; background-image: url('/img/banners/{banner}'); background-size: cover; background-position: center;";
    }

    private string GetImage(Paragraph paragraph) => $"img/{paragraph.PictureUrl}";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("highlightCode");
        }

        var AuthSate = await AuthenticationState.GetAuthenticationStateAsync();
    }

    protected async override Task OnParametersSetAsync()
    {
        Article = ArticleHelper.GetArticles().Single(x => x.Id == ArticleId);

        var AuthSate = await AuthenticationState.GetAuthenticationStateAsync();

        if (AuthSate.User.Identity.IsAuthenticated)
        {
            IsLoggedIn = true;
            var claims = AuthSate.User;
            UserId = claims.FindFirstValue(ClaimTypes.NameIdentifier);

            IsCompleted = await ProjectService.IsProjectCompleted(UserId, ArticleId);
        }

        IsLoading = false;
    }

    private async Task MarkAsRead()
    {
        IsSubmitting = true;

        var response = await ProjectService.PostArticle(ArticleId, UserId, string.Empty, true, false);

        IsSubmitting = false;

        if (response.Status == Data.Models.Responses.ResponseStatus.Success)
        {
            SnackbarService.Add("Article successfuly marked as read", Severity.Success);
        }
        else
        {
            SnackbarService.Add("There was an error", Severity.Error);
        }

        IsCompleted = await ProjectService.IsProjectCompleted(UserId, ArticleId);
    }
}

<style>
    a {
        color: #1976d2; /* Material blue */
    }
</style>

