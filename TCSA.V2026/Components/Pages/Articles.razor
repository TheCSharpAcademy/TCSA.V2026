@page "/articles/{articleType?}"
@using TCSA.V2026.Data.Curriculum
@using TCSA.V2026.Data.Models

<PageTitle>Articles</PageTitle>

<MudContainer>
    @if (IsLoading)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        <MudGrid Class="mt-5">
            @foreach (var article in ArticlesList)
            {
                <MudItem xs="12" sm="6" md="3">
                    <MudLink OnClick="@(() => NavigateToArticle(article))">
                        <MudCard Style="height:100%" Elevation="3">
                            <MudCardMedia Image="@($"img/cardimages/{article.CardImgUrl}")" Height="200" />
                            <MudCardContent>
                                <MudText Typo="Typo.h5" Style="margin-bottom:5px">@article.Title</MudText>
                                <MudText Typo="Typo.body2">@article.Description</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudLink>
                </MudItem>
            }
        </MudGrid>
    }
</MudContainer>


@code {
    [Inject] private NavigationManager Navigation { get; set; }

    [Parameter] public string articleType { get; set; }

    private List<Article> ArticlesList { get; set; } = new();
    private List<int> NoDisplayIds { get; set; } = new() { 1, 2, 3, 4, 51, 100 };

    private bool IsLoading = true;

    protected async override Task OnParametersSetAsync()
    {
        ArticlesList = ArticleHelper.GetArticles()
        .Where(x => !NoDisplayIds.Contains(x.Id))
        .ToList();

        @if (articleType == "blog")
        {
            ArticlesList = ArticlesList.Where(x => x.Area == Area.Blog).ToList();
        } else
        {
            ArticlesList = ArticlesList.Where(x => x.Area != Area.Blog).ToList();
        }

        IsLoading = false;
    }

    private Task NavigateToArticle(Article article)
    {
        Navigation.NavigateTo($"/article/{article.Id}/{article.Slug}");
        return Task.CompletedTask;
    }


}
