@page "/dashboard/activity"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations
@using TCSA.V2026.Data.Curriculum
@using TCSA.V2026.Data.DTOs
@using TCSA.V2026.Data.Models
@using TCSA.V2026.Data.Models.Responses
@using TCSA.V2026.Components.UI
@using TCSA.V2026.Helpers
@using TCSA.V2026.Services
@attribute [Authorize]

<PageTitle>Activity</PageTitle>

<MudContainer>
    @if (User != null)
    {
        <DashboardToolBar User=@User></DashboardToolBar>
    }

    @if (IsLoading)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        @* <MudText>LoadTime: @LoadTime.TotalSeconds.ToString()</MudText> *@
        <MudSelect T="ActivityType?"
        Label="Filter by Activity Type"
        @bind-Value="SelectedActivityType"
        Class="my-2" Dense="true" Clearable="true">
            <MudSelectItem T="ActivityType?" Value="null">All</MudSelectItem>
            @foreach (var type in Enum.GetValues<ActivityType>())
            {
                <MudSelectItem T="ActivityType?" Value="@type">@GetEnumDisplayName(type)</MudSelectItem>
            }
        </MudSelect>

        if (UserActivity != null && UserActivity.Count > 0)
        {
            <MudHidden Breakpoint="Breakpoint.LgAndUp">
                @foreach(var a in UserActivity)
                {
                    <MudCard Class="mt-1">
                        <MudCardHeader Class="d-flex align-items-center flex-wrap justify-space-between ">
                            <CardHeaderContent>
                                <MudText Typo="Typo.body2">@a.Date.ToString("MMM dd, yyyy, ddd")</MudText>
                                <MudText Typo="Typo.body1" Color="Color.Primary" Style=@GetDateCellStyleMobile(a)> @((MarkupString)a.Description)</MudText>
                                <MudGrid Class="pt-1">
                                    <MudItem xs="6" Class="d-flex align-items-center">
                                        <MudText Typo="Typo.body2" Class="mr-1">XPs Won: </MudText>
                                        <MudText Typo="Typo.body2" Color="Color.Primary" Style="font-weight: bold;"> @a.ExperiencePoints</MudText>
                                    </MudItem>
                                    <MudItem xs="6" Class="d-flex align-items-center">
                                        <MudText Typo="Typo.body2" Class="mr-1">Total XPs:</MudText>
                                        <MudText Typo="Typo.body2" Color="Color.Error" Style="font-weight: bold;">  @a.CurrentExperiencePoints</MudText>
                                    </MudItem>
                                </MudGrid>
                            </CardHeaderContent>
                        </MudCardHeader>
                    </MudCard>
                }
            </MudHidden>

            <MudHidden Breakpoint="Breakpoint.MdAndDown">
                <MudDataGrid Class="mt-2" Dense="true" Items="@UserActivity">
                    <Columns>
                        <TemplateColumn Title="Date">
                            <CellTemplate>
                                <MudText Style="@GetDateCellStyle(context.Item)">
                                    @context.Item.Date.ToString("MMM dd, yyyy, ddd")
                                </MudText>
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn>
                            <CellTemplate>
                                <MudText Style="white-space:nowrap">
                                    @((MarkupString)context.Item.Description)
                                </MudText>
                            </CellTemplate>
                        </TemplateColumn>
                        <PropertyColumn Property="x => x.ExperiencePoints" Title="XPs Won" />
                        <PropertyColumn Property="x => x.CurrentExperiencePoints" Title="Total XPs" />
                    </Columns>
                </MudDataGrid>
            </MudHidden>
        }
    }
</MudContainer>

@code {
    [Inject] private NavigationManager Navigation { get; set; }
    [Inject] private AuthenticationStateProvider AuthenticationState { get; set; }
    [Inject] private IProjectService ProjectService { get; set; }
    [Inject] private IUserService UserService { get; set; }
    [Inject] protected ICommunityService CommunityService { get; set; }

    private ApplicationUser User { get; set; }
    private List<ActivityDisplay>? AllUserActivity = new();
    private List<ActivityDisplay>? UserActivity = new();

    private ActivityType? _selectedActivityType = null;
    private ActivityType? SelectedActivityType
    {
        get => _selectedActivityType;
        set
        {
            if (_selectedActivityType != value)
            {
                _selectedActivityType = value;
                FilterUserActivity();
            }
        }
    }

    private bool IsLoading = true;
    private string UserId = string.Empty;
    private TimeSpan LoadTime = TimeSpan.Zero;

    protected override async Task OnInitializedAsync()
    {
        var startTime = DateTime.UtcNow;
        var authSate = await AuthenticationState.GetAuthenticationStateAsync();

        if (!authSate.User.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("Account/Login");
        }

        var claims = authSate.User;
        UserId = claims.FindFirstValue(ClaimTypes.NameIdentifier);
        User = await UserService.GetUserById(UserId);

        var user = await UserService.GetDetailedUserById(UserId);
        AllUserActivity = ActivityHelper.GetActivityDisplay(user);

        FilterUserActivity();
        LoadTime = DateTime.UtcNow - startTime;

        IsLoading = false;
    }

    private void FilterUserActivity()
    {
        if (SelectedActivityType is null)
        {
            UserActivity = AllUserActivity;
        }
        else
        {
            UserActivity = AllUserActivity?.Where(x => x.ActivityType == SelectedActivityType.Value).ToList();
        }

        StateHasChanged();
    }

    private string GetDateCellStyle(ActivityDisplay activity)
    {
        var commonStyles = "padding: 10px 10px 10px 20px;  border-radius: 4px; white-space: nowrap;";
        return activity.ActivityType switch
        {
            ActivityType.NewBelt => $"background-color: blue; color: white; {commonStyles}",
            ActivityType.ProjectSubmitted => $"background-color: orange;  {commonStyles}",
            ActivityType.ProjectCompleted => $"background-color: lightgreen;  {commonStyles}",
            ActivityType.ArticleRead => $"background-color: lightblue; {commonStyles}",
            ActivityType.CodeReviewCompleted => $"background-color: purple; color: white; {commonStyles}",
            ActivityType.IssueSubmitted => $"background-color: salmon; {commonStyles}",
            _ => ""
        };
    }

    private string GetDateCellStyleMobile(ActivityDisplay activity)
    {
        var commonStyles = "padding: 10px 10px 10px 20px;  border-radius: 4px;";
        return activity.ActivityType switch
        {
            ActivityType.NewBelt => $"background-color: blue; color: white; {commonStyles}",
            ActivityType.ProjectSubmitted => $"background-color: orange;  {commonStyles}",
            ActivityType.ProjectCompleted => $"background-color: lightgreen;  {commonStyles}",
            ActivityType.ArticleRead => $"background-color: lightblue; {commonStyles}",
            ActivityType.CodeReviewCompleted => $"background-color: purple; color: white; {commonStyles}",
            ActivityType.IssueSubmitted => $"background-color: salmon; {commonStyles}",
            _ => ""
        };
    }

    private string GetEnumDisplayName(ActivityType type)
    {
        var fieldInfo = type.GetType().GetField(type.ToString());
        var attributes = fieldInfo?.GetCustomAttributes(typeof(DisplayAttribute), false);

        return attributes?.FirstOrDefault() is DisplayAttribute displayAttribute
            ? displayAttribute.Name
            : type.ToString(); // Fall back to raw enum name if no attribute is found
    }

}
