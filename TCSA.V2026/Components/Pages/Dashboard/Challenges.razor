@page "/dashboard/challenges"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using TCSA.V2026.Data.Models
@using TCSA.V2026.Data.Models.Responses
@using TCSA.V2026.Services
@attribute [Authorize]

<MudContainer>
    @if (User != null)
    {
        <DashboardToolBar User=@User></DashboardToolBar>
    }
    <MudStack Row Class="mt-4" Spacing="4" Breakpoint="Breakpoint.Xs">
        <MudPaper Class="flex-grow-1 pb-3" Elevation="3" Outlined="false">
            <MudStack AlignItems="AlignItems.Center" Spacing="2" Class="py-3 px-4 px-md-5" Style="@($"background-color:{Colors.Green.Lighten1}")">
                <i class="fas fa-check-circle fa-3x" style="color: white;" />
                <MudText Typo="Typo.subtitle1" Style="font-weight: bold; color: white;">COMPLETED</MudText>
            </MudStack>
            <MudStack Spacing="0" AlignItems="AlignItems.Center" Class="px-4 px-md-5">
                <MudText Style="font-size: 2.5rem; font-weight: bolder;">@CompletedChallenges.Count</MudText>
                <MudText Style="font-size: 1.25rem;">Challenges</MudText>
            </MudStack>
        </MudPaper>
        <MudPaper Class="flex-grow-1 pb-3" Elevation="3" Outlined="false">
            <MudStack AlignItems="AlignItems.Center" Spacing="2" Class="py-3 px-4 px-md-5" Style="@($"background-color:{Colors.Red.Default}")">
                <i class="fas fa-fire fa-3x" style="color: white;" />
                <MudText Typo="Typo.subtitle1" Style="font-weight: bold; color: white;">STREAK</MudText>
            </MudStack>
            <MudStack Spacing="0" AlignItems="AlignItems.Center" Class="px-4 px-md-5">
                <MudText Style="font-size: 2.5rem; font-weight: bolder;">12</MudText>
                <MudText Style="font-size: 1.25rem;">Days</MudText>
                <MudText Typo="Typo.caption">Best: 30 days</MudText>
            </MudStack>
        </MudPaper>
        <MudPaper Class="flex-grow-1 pb-3" Elevation="3" Outlined="false">
            <MudStack AlignItems="AlignItems.Center" Spacing="2" Class="py-3 px-4 px-md-5" Style="@($"background-color:{Colors.Yellow.Darken1}")">
                <MudImage ObjectFit="ObjectFit.Contain" Width="42" Src="img/experience.png" />
                <MudText Typo="Typo.subtitle1" Style="font-weight: bold; color: white;">XP POINTS</MudText>
            </MudStack>
            <MudStack Spacing="0" AlignItems="AlignItems.Center" Class="px-4 px-md-5">
                <MudText Style="font-size: 2.5rem; font-weight: bolder;">2450</MudText>
                <MudText Style="font-size: 1.25rem;">XP</MudText>
            </MudStack>
        </MudPaper>
    </MudStack>

    @if (IsLoading)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        <MudText>LoadTime: @LoadTime.TotalSeconds.ToString()</MudText>
        if (ChallengesList != null && ChallengesList.Count > 0)
        {
            <MudStack Row Class="mt-6 mb-4" Spacing="4" AlignItems="AlignItems.Center">
                <MudCheckBox @bind-Value="@_showCompleted"
                Label="Show Completed"
                CheckedIcon="@Icons.Material.Outlined.CheckBox"
                UncheckedIcon="@Icons.Material.Outlined.CheckBoxOutlineBlank" />
                <MudSelect T="Level" Label="Filter by Level" Placeholder="Level" Class="flex-grow-0" MultiSelection="true" @bind-SelectedValues="_selectedLevels">
                    @foreach (Level item in Enum.GetValues(typeof(Level)))
                    {
                        <MudSelectItem Value="@item">@item.ToString()</MudSelectItem>
                    }
                </MudSelect>
            </MudStack>
            <MudStack Spacing="4">
                @foreach (var challenge in FilteredChallenges)
                {
                    <MudPaper Elevation="3" Outlined="false" Class="py-3 px-4 px-md-5" Style="@(CompletedChallenges.Contains(challenge.Id) ? "border: 2px solid green;" : "")">
                        <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Breakpoint="Breakpoint.Xs">
                            <MudStack Row Spacing="5">
                                <MudImage ObjectFit="ObjectFit.Contain" Width="60" Src="@($"img/belts/{challenge.Level}-belt.png")" />
                                <MudStack Spacing="1">
                                    <MudText Style="font-weight:bolder" Typo="Typo.subtitle1" Class="mud-primary-text">@challenge.Name</MudText>
                                    <MudText Typo="Typo.body2">@challenge.Description</MudText>
                                    <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                                        <MudImage ObjectFit="ObjectFit.Contain" Width="30" Src="img/experience.png" />
                                        <MudText Style="font-weight:bolder" Typo="Typo.subtitle2">@challenge.ExperiencePoints</MudText>
                                    </MudStack>
                                </MudStack>
                            </MudStack>
                            <MudStack Row Spacing="2">
                                <MudButton Size="@Size.Small"
                                Variant="@Variant.Filled"
                                Color="@Color.Warning"
                                OnClick="@(() => JS.InvokeVoidAsync("window.open", $"https://www.codewars.com/kata/{challenge.ExternalId}", "_blank", "noopener,noreferrer"))"
                                StartIcon="fas fa-eye">
                                    View
                                </MudButton>
                                @if (!CompletedChallenges.Contains(challenge.Id))
                                {
                                    <MudButton Size="@Size.Small"
                                    Variant="@Variant.Filled"
                                    Color="@Color.Primary"
                                    OnClick="@(() => Sync(challenge.Id, challenge.ExternalId))"
                                    StartIcon="@Icons.Material.Filled.Cached">
                                        Sync
                                    </MudButton>
                                }
                            </MudStack>
                        </MudStack>
                    </MudPaper>
                }
            </MudStack>
            <MudPagination Class="mt-3 justify-center" Style="width: 100%;" Count="FilteredChallenges.Count" />
        }
    }
</MudContainer>

@code {
        [Inject] private NavigationManager Navigation { get; set; }
        [Inject] private AuthenticationStateProvider AuthenticationState { get; set; }
        [Inject] private IChallengeService ChallengeService { get; set; }
        [Inject] private ICodewarsService CodewarsService { get; set; }
        [Inject] private IUserService UserService { get; set; }

        [Inject] private IJSRuntime JS { get; set; }
        [Inject] private ISnackbar Snackbar { get; set; }

    private List<Challenge> ChallengesList = new();
    private List<int> CompletedChallenges = new();
    private ApplicationUser User { get; set; }
    private List<Challenge> FilteredChallenges =>
        ChallengesList.Where(c =>
            (!_showCompleted || IsCompleted(c.Id)) &&
            (!_selectedLevels.Any() || _selectedLevels.Contains(c.Level))
        ).ToList();

    private IEnumerable<Level> _selectedLevels = new HashSet<Level>();
    private bool _showCompleted = false;
    private bool IsLoading = true;
    private string UserId = string.Empty;
    private TimeSpan LoadTime = TimeSpan.Zero;

    protected override async Task OnInitializedAsync()
    {
        var startTime = DateTime.UtcNow;
        var authSate = await AuthenticationState.GetAuthenticationStateAsync();

        if (!authSate.User.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("Account/Login");
        }

        var claims = authSate.User;
        UserId = claims.FindFirstValue(ClaimTypes.NameIdentifier);
        User = await UserService.GetDetailedUserById(UserId);
        ChallengesList = await ChallengeService.GetChallenges(User.Level);
        CompletedChallenges = User.UserChallenges.Select(uc => uc.ChallengeId).ToList();

        LoadTime = DateTime.UtcNow - startTime;

        IsLoading = false;
    }

    private bool IsCompleted(int id) {
        return CompletedChallenges.Contains(id);
    }

    private async Task Sync(int challengeId, string externalId)
    {
        var result = await CodewarsService.Sync(User.CodeWarsUsername, challengeId, externalId, UserId);

        if (result.Status == ResponseStatus.Success)
        {
            Snackbar.Add("Sync Successful", Severity.Success);
            User = await UserService.GetUserById(UserId);
        }
        else
        {
            Snackbar.Add($"Error: {result.Message}", Severity.Error);
        }

        User = await UserService.GetUserById(UserId);
    }
}
