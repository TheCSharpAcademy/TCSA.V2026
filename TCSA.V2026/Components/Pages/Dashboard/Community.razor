@page "/dashboard/community"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using TCSA.V2026.Data.Curriculum
@using TCSA.V2026.Data.Models
@using TCSA.V2026.Data.Models.Responses
@using TCSA.V2026.Components.UI
@using TCSA.V2026.Services
@attribute [Authorize]
@inject IDialogService DialogService

<PageTitle>Community</PageTitle>

<MudContainer>
    @if (User != null)
    {
        <DashboardToolBar User=@User></DashboardToolBar>
    }

    @if (IsLoading)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        <MudButton Class="mt-3 ml-5 mr-5"
        Size="@Size.Medium"
        Variant="@Variant.Filled" Color="@Color.Success"
        OnClick="@(() => SubmitIssueDialog())">
            Create Issue
        </MudButton>
        <MudDataGrid Class="mt-2" Items="@IssuesToShow.OrderByDescending(i => i.Id)" Dense="true" RowStyle="GetRowStyle">
            <Columns>
                <PropertyColumn Property="i => i.Title" Title="Title" />
                <PropertyColumn Property="i => i.ExperiencePoints" Title="XPs" />
                <PropertyColumn Property="i => GetProjectName(i.CommunityProjectId)" Title="Project" />
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudStack Row>
                            @if (!string.IsNullOrEmpty(context.Item.GithubUrl) && context.Item.GithubUrl.StartsWith("http"))
                            {
                                <MudButton 
                                Size="@Size.Small" 
                                Variant="@Variant.Filled" 
                                Color="@Color.Warning"
                                OnClick="@(() => JS.InvokeVoidAsync("window.open", context.Item.GithubUrl, "_blank", "noopener,noreferrer"))"
                                StartIcon="fas fa-eye">
                                    View
                                </MudButton>

                            }
                            @if (!User.DashboardProjects.Any(d => d.ProjectId == context.Item.ProjectId))
                            {
                                <MudButton 
                                Size="@Size.Small" 
                                Variant="@Variant.Filled" 
                                Color="@Color.Success"
                                OnClick="@(() => AssignMyself(context.Item))"
                                StartIcon="fas fa-hand-point-up">
                                    Pick 
                                </MudButton>
                            } 
                            else 
                            {
                                if (User.DashboardProjects.FirstOrDefault(d => d.ProjectId == context.Item.ProjectId).IsPendingReview)
                                {
                                    <MudChip T="string" Variant="Variant.Text" Color="Color.Warning">Pending Review</MudChip>
                                } 
                                else 
                                {
                                    <MudButton 
                                    Size="@Size.Small"
                                    Variant="@Variant.Filled" Color="@Color.Primary"
                                    OnClick="@(() => SubmitToReviewDialog(context.Item.ProjectId))"
                                    EndIcon="@Icons.Material.Filled.Send">
                                        Submit PR
                                    </MudButton>
                                }
                            }
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    }
</MudContainer>

@code {
    [Inject] private NavigationManager Navigation { get; set; }
    [Inject] private AuthenticationStateProvider AuthenticationState { get; set; }
    [Inject] private IProjectService ProjectService { get; set; }
    [Inject] private IUserService UserService { get; set; }
    [Inject] protected ICommunityService CommunityService { get; set; }

    [Inject] private IJSRuntime JS { get; set; }
    [Inject] private ISnackbar Snackbar { get; set; }

    private ApplicationUser User { get; set; }
    private List<Project> Projects;
    private List<CommunityIssue>? IssuesToShow = new();
    private List<DashboardProject> UserProjects = new();

    private bool IsLoading = true;
    private string UserId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authSate = await AuthenticationState.GetAuthenticationStateAsync();

        if (!authSate.User.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("Account/Login");
        }

        Projects = ProjectHelper.GetProjects();
        var claims = authSate.User;
        UserId = claims.FindFirstValue(ClaimTypes.NameIdentifier);
        User = await UserService.GetUserById(UserId);

        IssuesToShow = await CommunityService.GetAvailableIssuesForCommunityPage(UserId);

        IsLoading = false;
    }

    private async Task SubmitToReviewDialog(int projectId)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<TCSASubmitProjectDialog> { { x => x.ProjectId, projectId }, { x => x.IsIssue, true }, { x => x.User, User} };
        var dialog = await DialogService.ShowAsync<TCSASubmitProjectDialog>("Submit Issue", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            Snackbar.Add("Issue submitted successfully", Severity.Success);
            User = await UserService.GetUserById(UserId);
            IssuesToShow = await CommunityService.GetAvailableIssuesForCommunityPage(UserId);
        }
    }

    private async Task SubmitIssueDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<TCSASubmitIssueDialog>{ { x => x.UserId, UserId } };


        var dialog = await DialogService.ShowAsync<TCSASubmitIssueDialog>("Submit Issue", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            Snackbar.Add("Issue created successfully", Severity.Success);
            User = await UserService.GetUserById(UserId);
            IssuesToShow = await CommunityService.GetAvailableIssuesForCommunityPage(UserId);
        }
    }

    private async Task AssignMyself(CommunityIssue issue)
    {
        var result = await CommunityService.AssignUserToIssue(UserId, issue);

        if (result.Status == ResponseStatus.Success)
        {
            Snackbar.Add("Assignment Successful", Severity.Success);
            User = await UserService.GetUserById(UserId);
        }
        else
        {
            Snackbar.Add($"Error: {result.Message}", Severity.Error);
        }

        IssuesToShow = await CommunityService.GetAvailableIssuesForCommunityPage(UserId);
    }

    private string GetProjectName(int commProjectId) 
    {
        return commProjectId switch
        {
            54 => "Point Of Sale",
            87 => "Academy V2",
            207 => "Academy 2026"
        };
    }
}
