@page "/course/{courseId:int}/article/{articleDisplayId:int}/{articleId:int}/{isCode:bool}"
@using System.Security.Claims
@using TCSA.V2026.Data.Curriculum
@using TCSA.V2026.Data.Models
@using TCSA.V2026.Services
@inject IJSRuntime JSRuntime

<MudGrid>
    @if (IsLoading)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        <MudItem xs="12" md="3">
            <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
                <MudList T="string" Dense="true">
                    @for (int i = 0; i < Course.Articles.Count; i++)
                    {
                        var article = Course.Articles[i];
                        <MudListItem Text=@($"{i + 1}. {article.Title}")
                        Style=@(CompletedProjects.Contains(article.Id) ? "background-color: #e0ffe0;" : null)
                        OnClick="@(() => NavigateToArticle(article.CourseDisplayId.Value, article.Id))" />
                    }
                </MudList>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" md="9">
            <MudPaper Class="d-flex flex-column mud-width-full mt-3 py-5 px-5">
                @if (IsLoggedIn && IsCompleted)
                {
                    <MudAlert Class="mt-3 mb-3" Severity="Severity.Success" Elevation="2">You have completed this roadmap step.</MudAlert>
                }

                <MudText Typo="Typo.h4" Color="Color.Primary" Class="mb-2 mt-8">@Article.Title</MudText>

                @foreach (var block in BlocksToShow)
                {
                    if (!string.IsNullOrEmpty(block.Title))
                    {
                        <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-2 mt-8">@block.Title</MudText>
                    }

                    @foreach (var paragraph in block.Paragraphs)
                    {
                        if (paragraph.IsCode)
                        {
                            <MudPaper Class="p-4 my-4 overflow-auto line-numbers">
                                <pre class="line-numbers"><code class="language-csharp">@((MarkupString)paragraph.Body)</code></pre>
                            </MudPaper>
                        }
                        else if (paragraph.IsPicture)
                        {
                            var imageSrc = $"img/courseimages/{paragraph.PictureUrl}";
                            <MudPaper Class="d-flex justify-center photo-paragraph my-2 py-10 px-5 px-sm-20" Elevation="0">
                                <MudImage Src="@imageSrc" Alt="Course image" Fluid="true" />
                            </MudPaper>
                        }
                        else
                        {
                            if (!string.IsNullOrWhiteSpace(paragraph.BackgroundColor))
                            {
                                var bgStyle = $"background-color: {paragraph.BackgroundColor}; padding: 1rem";
                                var textStyle = $"color: {paragraph.FontColor};";

                                <MudPaper Style="@bgStyle" Elevation="1" Class="my-5">
                                    <MudText Style="@textStyle" Typo="Typo.body1">
                                        @((MarkupString)paragraph.Body)
                                    </MudText>
                                </MudPaper>
                            }
                            else
                            {
                                <MudText Class="mt-2" Typo="Typo.body1">
                                    @((MarkupString)paragraph.Body)
                                </MudText>
                            }
                        }
                    }
                }
                @if (IsLoggedIn && !IsCompleted)
                {
                    <div class="d-flex justify-center my-5 mt-5">
                        <MudButton Variant="Variant.Filled"
                        class="mt-5"
                        Color="Color.Primary"
                        OnClick="MarkAsRead"
                        Disabled="IsSubmitting">
                            Mark as Read
                        </MudButton>
                    </div>
                }
            </MudPaper>
        </MudItem>

    }
</MudGrid>

@code {
    [Inject] NavigationManager NavigationManager { get; set; }
    [Inject] private AuthenticationStateProvider AuthenticationState { get; set; }
    [Inject] private IProjectService ProjectService { get; set; }

    [Inject] private ISnackbar SnackbarService { get; set; }

    [Parameter] public int CourseId { get; set; }
    [Parameter] public int ArticleId { get; set; }
    [Parameter] public int ArticleDisplayId { get; set; }
    [Parameter] public bool IsCode { get; set; } = false;

    private List<Data.Models.Block> BlocksToShow = new();
    private Course Course { get; set; }
    private Article Article { get; set; }
    private List<int> CompletedProjects = new();
    private bool IsLoggedIn = false;
    private bool IsLoading = true;
    private bool IsCompleted = false;
    private bool IsSubmitting = false;
    private string UserId;
    private string _lastRenderedCode = string.Empty;

    private async Task MarkAsRead()
    {
        IsSubmitting = true;

        var response = await ProjectService.PostArticle(ArticleId, UserId, string.Empty, true);

        IsSubmitting = false;

        if (response.Status == Data.Models.Responses.ResponseStatus.Success)
        {
            SnackbarService.Add("Article successfuly marked as read", Severity.Success);
        }
        else
        {
            SnackbarService.Add("There was an error", Severity.Error);
        }

        IsCompleted = await ProjectService.IsProjectCompleted(UserId, ArticleId);
    }

    protected async override Task OnParametersSetAsync()
    {
        Course = CourseHelper.GetCourses().FirstOrDefault(x => x.Id == CourseId);

        if (Course != null)
        {
            Article = Course.Articles.FirstOrDefault(a => a.CourseDisplayId == ArticleDisplayId);
        }

        BlocksToShow = IsCode
      ? Article.Blocks.Where(x => x.IsCourseCodePage).ToList()
      : Article.Blocks.Where(x => !x.IsCourseCodePage).ToList();

        var AuthSate = await AuthenticationState.GetAuthenticationStateAsync();

        if (AuthSate.User.Identity.IsAuthenticated)
        {
            IsLoggedIn = true;
            var claims = AuthSate.User;
            UserId = claims.FindFirstValue(ClaimTypes.NameIdentifier);
        }

        var projects = await ProjectService.GetCompletedProjectsById(UserId);
        var courseIds = Course.Articles.Select(x => x.Id);
        CompletedProjects = projects.Where(x => courseIds.Contains(x)).ToList();

        IsCompleted = await ProjectService.IsProjectCompleted(UserId, ArticleId);
        IsLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("highlightCode");
    }

    private void NavigateToArticle(int articleDisplayId, int articleId)
    {
        NavigationManager.NavigateTo($"/course/{CourseId}/article/{articleDisplayId}/{articleId}/false", forceLoad: true);
    }
}

