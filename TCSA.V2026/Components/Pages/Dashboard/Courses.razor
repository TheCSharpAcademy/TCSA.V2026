@page "/dashboard/Courses"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using TCSA.V2026.Data.Curriculum
@using TCSA.V2026.Data.DTOs
@using TCSA.V2026.Data.Models
@using TCSA.V2026.Data.Models.Responses
@using TCSA.V2026.Components.UI
@using TCSA.V2026.Helpers
@using TCSA.V2026.Services
@attribute [Authorize]

<PageTitle>Courses</PageTitle>

<MudContainer>
    <h1 class="visually-hidden">Courses</h1>
    @if (User != null)
    {
        <DashboardToolBar User=@User></DashboardToolBar>
    }

    @if (IsLoading)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        foreach (var course in DashboardCourses)
        {
            <MudCard Class="mt-1" Style="@(course.Status == DashBoardCourseStatus.Completed ? "border: 2px solid green;" : null)">
                <MudCardHeader Class="d-flex align-items-center flex-wrap">
                    <CardHeaderAvatar>
                        <MudImage Width="40" Src="@($"img/icons/{course.ImgUrl}")" />
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <h2 class="mud-typography-body1" style="font-weight: bold">@course.Title</h2>
                        <MudText Typo="Typo.body2">@course.Description</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudBreakpointProvider OnBreakpointChanged="BreakpointChanged">
                            @if (course.Status == DashBoardCourseStatus.Completed)
                            {
                                <MudChip Class="ml-5 mt-5"
                                         T="string"
                                         Size="@_chipSize"
                                         Color="Color.Success">
                                    Completed
                                </MudChip>
                            }
                            else if (course.Status == DashBoardCourseStatus.InProgress)
                            {
                                <MudChip Class="ml-5 mt-5"
                                         T="string"
                                         Size="@_chipSize"
                                         Color="Color.Primary">
                                    In Progress
                                </MudChip>
                            }
                            else if (course.Status == DashBoardCourseStatus.NotStarted)
                            {
                                <MudChip Class="ml-5 mt-5"
                                         T="string"
                                         Size="@_chipSize"
                                         Color="Color.Info">
                                    Not Started
                                </MudChip>
                            }
                            <MudButton Class="ml-5 mr-5 mt-5"
                                       Size="@_buttonSize"
                                       Variant="@Variant.Filled"
                                       OnClick="@(() => NavigateToCourse(course.Id))"
                                       Color="Color.Primary"
                                       StartIcon="fas fa-eye">
                                Go To Course
                            </MudButton>
                        </MudBreakpointProvider>
                    </CardHeaderActions>
                </MudCardHeader>
            </MudCard>
        }
    }
</MudContainer>

@code {
    [Inject] private NavigationManager Navigation { get; set; }
    [Inject] private AuthenticationStateProvider AuthenticationState { get; set; }  
    [Inject] private IUserService UserService { get; set; }

    private ApplicationUser User { get; set; }
    private List<Course> CourseList = CourseHelper.GetCourses();
    private List<DashboardCourseInfo> DashboardCourses = new();

    private bool IsLoading = true;
    private string UserId = string.Empty;
    private TimeSpan LoadTime = TimeSpan.Zero;
    private Size _chipSize = Size.Large;
    private Size _buttonSize = Size.Medium;

    protected override async Task OnInitializedAsync()
    {
        var startTime = DateTime.UtcNow;
        var authSate = await AuthenticationState.GetAuthenticationStateAsync();

        if (!authSate.User.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("Account/Login");
        }

        var claims = authSate.User;
        UserId = claims.FindFirstValue(ClaimTypes.NameIdentifier);
        User = await UserService.GetUserById(UserId);

        GetCourseInfo();

        LoadTime = DateTime.UtcNow - startTime;

        IsLoading = false;
    }

    private void GetCourseInfo()
    {
        var oopCourse = CourseList.FirstOrDefault(x => x.Id == 1);
        var oopIds = oopCourse.Articles.Select(c => c.Id).ToList();
        var completedOopIds = oopIds.Where(id => User.DashboardProjects.Any(dp => dp.IsCompleted && dp.ProjectId == id)).ToList();

        DashboardCourses.Add
        (
            new DashboardCourseInfo
                {
                    Id = 1,
                    Title = oopCourse.Title,
                    Description = $"{completedOopIds.Count} out of {oopIds.Count} chapters completed",
                    ImgUrl = oopCourse.ImgUrl,
                    Status = GetCourseStatus(completedOopIds, oopIds),
                }
        );

        var webApiCourse = CourseList.FirstOrDefault(x => x.Id == 3);
        var webApiIds = webApiCourse.Articles.Select(c => c.Id).ToList();
        var completeWebApiIds = webApiIds.Where(id => User.DashboardProjects.Any(dp => dp.IsCompleted && dp.ProjectId == id)).ToList();

        DashboardCourses.Add
        (
            new DashboardCourseInfo
                {
                    Id = 3,
                    Title = webApiCourse.Title,
                    Description = $"{completeWebApiIds.Count} out of {webApiIds.Count} chapters completed",
                    ImgUrl = webApiCourse.ImgUrl,
                    Status = GetCourseStatus(completeWebApiIds, webApiIds)
                }
        );

        var sqlCourse = CourseList.FirstOrDefault(x => x.Id == 4);
        var sqlCourseIds = sqlCourse.Articles.Select(c => c.Id).ToList();
        var completeSqlCourseIds = sqlCourseIds.Where(id => User.DashboardProjects.Any(dp => dp.IsCompleted && dp.ProjectId == id)).ToList();

        DashboardCourses.Add
        (
            new DashboardCourseInfo
            {
                Id = 4,
                Title = sqlCourse.Title,
                Description = $"{completeSqlCourseIds.Count} out of {sqlCourseIds.Count} chapters completed",
                ImgUrl = sqlCourse.ImgUrl,
                Status = GetCourseStatus(completeSqlCourseIds, sqlCourseIds)
            }
        );

        var wpfCourse = CourseList.FirstOrDefault(x => x.Id == 5);
        var wpfCourseIds = wpfCourse.Articles.Select(c => c.Id).ToList();
        var completeWpfCourseIds = wpfCourseIds.Where(id => User.DashboardProjects.Any(dp => dp.IsCompleted && dp.ProjectId == id)).ToList();

        DashboardCourses.Add
        (
            new DashboardCourseInfo
                {
                    Id = 5,
                    Title = wpfCourse.Title,
                    Description = $"{completeWpfCourseIds.Count} out of {wpfCourseIds.Count} chapters completed",
                    ImgUrl = wpfCourse.ImgUrl,
                    Status = GetCourseStatus(completeWpfCourseIds, wpfCourseIds)
                }
        );

        var diCourse = CourseList.FirstOrDefault(x => x.Id == 6);
        var diCourseIds = diCourse.Articles.Select(c => c.Id).ToList();
        var completeDiCourseIds = diCourseIds.Where(id => User.DashboardProjects.Any(dp => dp.IsCompleted && dp.ProjectId == id)).ToList();

        DashboardCourses.Add
        (
            new DashboardCourseInfo
            {
                Id = 6,
                Title = diCourse.Title,
                Description = $"{completeDiCourseIds.Count} out of {diCourseIds.Count} chapters completed",
                ImgUrl = diCourse.ImgUrl,
                Status = GetCourseStatus(completeDiCourseIds, diCourseIds)
            }
        );

        var reactCourse = CourseList.FirstOrDefault(x => x.Id == 7);
        var reactCourseIds = reactCourse.Articles.Select(c => c.Id).ToList();
        var completeReactCourseIds = reactCourseIds.Where(id => User.DashboardProjects.Any(dp => dp.IsCompleted && dp.ProjectId == id)).ToList();

        // DashboardCourses.Add
        // (
        //     new DashboardCourseInfo
        //     {
        //         Id = 7,
        //         Title = reactCourse.Title,
        //         Description = $"{completeReactCourseIds.Count} out of {reactCourseIds.Count} chapters completed",
        //         ImgUrl = reactCourse.ImgUrl,
        //         Status = GetCourseStatus(completeReactCourseIds, diCourseIds)
        //     }
        // );
    }

    private void NavigateToCourse(int courseId)
    {
        var course = CourseList.Single(c => c.Id == courseId);
        var firstArticle = course.Articles.First();
        var isCode = false;
        Navigation.NavigateTo($"/course/{courseId}/article/{firstArticle.CourseDisplayId}/{firstArticle.Id}/{isCode}");
    }

    private void BreakpointChanged(Breakpoint breakpoint)
    {
        if (breakpoint < Breakpoint.Sm)
        {
            _chipSize = Size.Small;
            _buttonSize = Size.Small;
        } else
        {
            _chipSize = Size.Large;
            _buttonSize = Size.Medium;
        }

        StateHasChanged();
    }

    private DashBoardCourseStatus GetCourseStatus(List<int> completedIds, List<int> allIds)
    {
        if (completedIds.Count == 0)
        {
            return DashBoardCourseStatus.NotStarted;
        }
        else if (completedIds.Count == allIds.Count)
        {
            return DashBoardCourseStatus.Completed;
        }
        else
        {
            return DashBoardCourseStatus.InProgress;
        }
    }
}
