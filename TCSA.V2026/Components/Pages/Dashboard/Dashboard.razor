@page "/dashboard"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using TCSA.V2026.Components.UI
@using TCSA.V2026.Data.DTOs
@using TCSA.V2026.Data.Models
@using TCSA.V2026.Data.Models.Responses
@using TCSA.V2026.Helpers
@using TCSA.V2026.Services
@attribute [Authorize]
<MudDialogProvider />

<PageTitle>Dashboard</PageTitle>

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<MudContainer>
    @if (User != null)
    {
        <DashboardToolBar User=@User></DashboardToolBar>
    }
    <MudCheckBox @bind-Value="@_showCompleted"
    Label="Show Completed"
    CheckedIcon="@Icons.Material.Outlined.CheckBox"
    UncheckedIcon="@Icons.Material.Outlined.CheckBoxOutlineBlank" />

    @if (IsLoading)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        @foreach (var area in Areas.Where(a => _showCompleted || !a.IsCompleted))
        {
            bool isInProgress = !area.IsCompleted && area.Tasks.Where(t => t.Status == Data.DTOs.TaskStatus.Completed).Any();

            <MudCard Class="mt-1" Style="@(area.IsCompleted ? "border: 2px solid green;" : isInProgress ? $"border: 2px solid #42a5f5" : null)">
                <MudCardHeader Class="d-flex align-items-center">
                    <CardHeaderAvatar>
                        <MudImage Width="40" Src="@($"img/icons/{area.ImgUrl}")" />
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.body1" Color="Color.Primary" Style="font-weight: bold;">@area.CardName</MudText>
                        <MudText Typo="Typo.body2">@area.Description</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        @if (area.IsCompleted)
                        {
                            <MudChip Class="mt-3 ml-5"
                            
                                     T="string"
                                     Size="@Size.Large"
                                     Color="Color.Success"
                                     Variant="Variant.Outlined"
                                    >
                                Completed
                            </MudChip>
                        }else if(isInProgress)
                        {
                            <MudChip Class="mt-3 ml-5"
                                     T="string"
                                     Size="@Size.Large"
                                     Color="Color.Info"
                                     Variant="Variant.Outlined"
                                     >
                                In Progress
                            </MudChip>
                        }
                        <MudButton Class="mt-2 ml-5 mr-5"
                        Size="@Size.Medium"
                        Variant="@Variant.Filled"
                        OnClick="@(() => OpenAreaDialog(area.Tasks))"
                        Color="Color.Primary"
                        StartIcon="fas fa-eye">
                            View Tasks
                        </MudButton>
                    </CardHeaderActions>
                </MudCardHeader>
            </MudCard>
        }
    }
</MudContainer>

@code {
    [Inject] private NavigationManager Navigation { get; set; }
    [Inject] private AuthenticationStateProvider AuthenticationState { get; set; }
    [Inject] private IUserService UserService { get; set; }
    [Inject] private IJSRuntime JS { get; set; }

    [Inject] private ISnackbar SnackbarService { get; set; }
    [Inject] private IDialogService DialogService { get; set; }

    [Parameter] public List<RoadmapTask> Tasks { get; set; } = new List<RoadmapTask>();

    private bool _showCompleted = true;
    private List<DashboardAreaInfo> Areas = new();
    private List<int>? CompletedProjects = new();
    private List<int>? PendingProjects = new();
    private ApplicationUser User;

    private bool IsLoading = true;
    private bool IsLoggedIn = false;
    private bool IsFccCompleted = false;
    private bool IsFccPending = false;
    private string UserId;

    private async Task OpenAreaDialog(IEnumerable<DashboardTaskDisplay> tasks)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<TCSADashboardAreaDialog> 
        { 
            { x => x.Tasks, tasks },
            { p => p.User, User }
        };
        var dialog = await DialogService.ShowAsync<TCSADashboardAreaDialog>(null, parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var status = (ResponseStatus)result.Data;
            var severity = status == ResponseStatus.Success ? Severity.Success : Severity.Error;
            var message = status == ResponseStatus.Success ? "Project submitted successfully" : "There was an error submitting the project";
            SnackbarService.Add(message, severity);

            if (status == ResponseStatus.Success)
            {
                User = await UserService.GetUserById(UserId);
            }
        }
    }

  

    protected override async Task OnInitializedAsync()
    {
        var AuthSate = await AuthenticationState.GetAuthenticationStateAsync();
        IsLoading = false;

        if (AuthSate.User.Identity.IsAuthenticated)
        {
            IsLoggedIn = true;
        }
        else
        {
            return;
        }
        var claims = AuthSate.User;
        UserId = claims.FindFirstValue(ClaimTypes.NameIdentifier);
        User = await UserService.GetUserById(UserId);
        CompletedProjects = User?.DashboardProjects?.Where(x => x.IsCompleted).Select(x => x.ProjectId).ToList();
        PendingProjects = User?.DashboardProjects?.Where(x => x.IsPendingReview).Select(x => x.ProjectId).ToList();

        IsFccCompleted = CompletedProjects.Contains(75);
        IsFccPending = PendingProjects.Contains(75);

        Areas = DashboardProjectsHelpers.GetAreas(CompletedProjects, PendingProjects);

        var fcc = DashboardProjectsHelpers.Projects.FirstOrDefault(x => x.Id == 75);

        Areas.FirstOrDefault(x => x.Area == Area.StartHere).Tasks.Add(new DashboardTaskDisplay
            {
                Id = 75,
                IconUrl = fcc.IconUrl,
                Title = fcc.Title,
                Status = DashboardProjectsHelpers.GetTaskStatus(fcc.Id, CompletedProjects, PendingProjects),
                Area = fcc.Area
            });
    }
}
