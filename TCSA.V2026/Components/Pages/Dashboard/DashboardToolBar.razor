@using TCSA.V2026.Components.UI
@using TCSA.V2026.Data.Curriculum
@using TCSA.V2026.Data.DTOs
@using TCSA.V2026.Data.Models
@using TCSA.V2026.Helpers
@using TCSA.V2026.Services

@inject IDialogService DialogService

<MudPaper Elevation="25">
    <MudToolBar Class="mt-5">
        <MudImage Class="mr-3" Src=@($"img/flags/{GetCountry(User.Country)}.png") Width="50"></MudImage>
        <MudText Class="mr-5" Style="font-weight: 600; font-size:large">@UserDisplayNameHelper.GetDisplayName(User)</MudText>
        <MudImage Class="mr-2" Src=@($"img/belts/{(Level)User.Level}-belt.png") Width="30"></MudImage>
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <MudText Class="mr-3" Style="font-weight: 500">@(((Level)User.Level).ToString() + " Belt")</MudText>
        </MudHidden>
        <MudImage Src="img/experience.png" Width="30"></MudImage>
        <MudText Style="font-weight: 500">@User.ExperiencePoints</MudText>
        <MudSpacer />
        <div Class="d-flex justify-space-around flex-wrap">
            @if (Notifications.Any(x => x.IsActive))
            {
                <MudBadge Content="@Notifications.Count(x => x.IsActive)" Overlap="true" Color="Color.Error" Class="mx-6 my-lg-4">
                    <MudIconButton OnClick="OpenDialog" Icon="@Icons.Material.Filled.Notifications" Color="Color.Primary" />
                </MudBadge>
            }
            else
            {
                <MudIconButton OnClick="OpenDialog" Icon="@Icons.Material.Filled.Notifications" Color="Color.Primary" />
            }
        </div>
    </MudToolBar>
</MudPaper>


@code {
    [Inject] private NavigationManager Navigation { get; set; }
    [Parameter] public ApplicationUser User { get; set; }
    [Inject] private IProjectService ProjectService { get; set; }

    private List<TCSANotificationItem> Notifications = new();

    protected async override Task OnParametersSetAsync()
    {
        var projects = ProjectHelper.GetProjects();

        var dbProjects = User.DashboardProjects.Where(dp => dp.IsPendingNotification || dp.DateCompleted > DateTime.UtcNow.AddDays(-7));

        // TODO: Include Issues in notifications
        foreach(var project in dbProjects)
        {
            var curriculumProject = projects.FirstOrDefault(p => p.Id == project.ProjectId);
            if (curriculumProject != null)
            {
                Notifications.Add(
                    new TCSANotificationItem
                    {
                        IconUrl = curriculumProject.IconUrl,
                        Description = GetDescription(project.ProjectId),
                        IsActive = project.IsPendingNotification
                    }
                );
            }
        }

        if (User.UserActivity.Any(x => x.ActivityType == ActivityType.NewBelt && x.DateSubmitted >= DateTime.UtcNow.AddDays(-7)))
        {
            Notifications.Add(new TCSANotificationItem
                {
                    IconUrl = $"{(Level)User.Level}-belt.png",
                    Description = $"You achieved {User.Level} belt!",
                    IsActive = User.HasPendingBeltNotification
                });
        }
    }

    private string GetDescription(int projectId)
    {
        var project = ProjectHelper.GetProjects().FirstOrDefault(x => x.Id == projectId);
        return $"Your project {project.Title} was marked as completed!"; 
    }

    private async Task OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<TCSANotificationDialog>
        {
            { p => p.Notifications, Notifications }
        };
        var dialog = await DialogService.ShowAsync<TCSANotificationDialog>(null, parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled && Notifications.Any(x => x.IsActive))
        {
            await ProjectService.AcknowledgeNotifications(User.Id);
        }
    }

    private string GetCountry(string country) => string.IsNullOrEmpty(country) ? "earth" : country;
}
