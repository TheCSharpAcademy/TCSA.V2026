@page "/dashboard/leaderboard"
@using Microsoft.AspNetCore.Authorization

@using System.Security.Claims;
@using TCSA.V2026.Data.Models
@using TCSA.V2026.Helpers
@using TCSA.V2026.Helpers.Constants
@using TCSA.V2026.Services
@using TCSA.V2026.Data.DTOs;
@attribute [Authorize]

<PageTitle>Leaderboard</PageTitle>
<MudContainer Class="pa-0">
    @if (User != null)
    {
        <DashboardToolBar User=@User></DashboardToolBar>
    }
    <h1 class="visually-hidden">@(IsReviews ? "Reviews Leaderboard" : "All Time Leaderboard")</h1>
    <MudButton FullWidth="true" Variant="Variant.Filled" Color="Color.Primary" Class="mb-4" OnClick="FilterReviews">
        Click to see @(IsReviews ? "All Time" : "Reviews") Leaderboard
    </MudButton>

    @if (Ranking > PagingConstants.LeaderboardPageSize && !IsReviews) {
        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => LoadPagination(((Ranking - 1) / PagingConstants.LeaderboardPageSize) + 1)">
            Click to See Your Ranking
        </MudButton>
    }

    @if (IsLoading)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        @* <MudText>LoadTime: @LoadTime.TotalSeconds.ToString()</MudText> *@
        if (Users != null && Users.Count > 0)
        {
            if (!IsReviews)
            {
                if (Pages > 1) {
                    <MudBreakpointProvider OnBreakpointChanged="BreakpointChanged">
                        <MudPagination
                            SelectedChanged="LoadPagination"
                            Count="Pages"
                            Selected="CurrentPage"
                            BoundaryCount="_boundaryCount"
                            Size="_paginationSize" />
                    </MudBreakpointProvider>
                }
                <MudDataGrid Class="mt-2" Dense="true" Items="@Users" Breakpoint="Breakpoint.None">
                    <Columns>
                        <TemplateColumn Title="Pos" HeaderStyle="font-weight:bold" HeaderClass="pa-2 pa-md-3" CellClassFunc="@_userLeaderboardClassFunc">
                            <CellTemplate>
                                <MudText Style="font-weight:bold" Typo="Typo.subtitle1">@context.Item.Ranking</MudText>
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="XPs" HeaderStyle="font-weight:bold" HeaderClass="pa-2 pa-md-3" CellClassFunc="@_userLeaderboardClassFunc">
                            <CellTemplate>
                                <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                                    <MudImage ObjectFit="ObjectFit.Contain" Width="30" Src="img/experience.png" />
                                    <MudText Style="font-weight:bold" Typo="Typo.subtitle2">@context.Item.ExperiencePoints</MudText>
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="Name" HeaderStyle="font-weight:bold" HeaderClass="pa-2 pa-md-3" CellClassFunc="@_userLeaderboardClassFunc">
                            <CellTemplate>
                                <MudText Style="font-weight:bold" Typo="Typo.subtitle1">@context.Item.DisplayName</MudText>
                                <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                                    <MudImage ObjectFit="ObjectFit.Contain" Width="20" Src="@($"img/belts/{context.Item.Level}-belt.png")" Alt="..." />
                                    <MudText Typo="Typo.subtitle2">@(context.Item.Level) Belt</MudText>
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="Country" HeaderStyle="font-weight:bold" HeaderClass="pa-2 pa-md-3" CellClassFunc="@_userLeaderboardClassFunc">
                            <CellTemplate>
                                <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                                    <MudImage ObjectFit="ObjectFit.Contain" Width="30" Src="@FlagHelper.GetFlag(context.Item.Country)" Alt="..." />
                                    <MudText Class="d-none d-sm-inline" Style="font-weight:bold" Typo="Typo.subtitle1">@context.Item.Country</MudText>
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            } else {
                <MudDataGrid Class="mt-2" Dense="true" Items="@ReviewUsers" Breakpoint="Breakpoint.None">
                    <Columns>
                        <TemplateColumn Title="Pos" HeaderStyle="font-weight:bold" HeaderClass="pa-2 pa-md-3" CellClassFunc="@_userReviewLeaderboardClassFunc">
                            <CellTemplate>
                                <MudText Style="font-weight:bold" Typo="Typo.subtitle1">@context.Item.Ranking</MudText>
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="Name" HeaderStyle="font-weight:bold" HeaderClass="pa-2 pa-md-3" CellClassFunc="@_userReviewLeaderboardClassFunc">
                            <CellTemplate>
                                <MudText Style="font-weight:bold" Typo="Typo.subtitle1">@context.Item.DisplayName</MudText>
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="Country" HeaderStyle="font-weight:bold" HeaderClass="pa-2 pa-md-3" CellClassFunc="@_userReviewLeaderboardClassFunc">
                            <CellTemplate>
                                <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                                    <MudImage ObjectFit="ObjectFit.Contain" Width="30" Src="@FlagHelper.GetFlag(context.Item.Country)" Alt="..." />
                                    <MudText Class="d-none d-sm-inline" Style="font-weight:bold" Typo="Typo.subtitle1">@context.Item.Country</MudText>
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="Total XP" HeaderStyle="font-weight:bold" HeaderClass="pa-2 pa-md-3" CellClassFunc="@_userReviewLeaderboardClassFunc">
                            <CellTemplate>
                                <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                                    <MudImage ObjectFit="ObjectFit.Contain" Width="30" Src="img/experience.png" />
                                    <MudText Style="font-weight:bold" Typo="Typo.subtitle2">@context.Item.TotalXp</MudText>
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="Total Reviews" HeaderStyle="font-weight:bold" HeaderClass="pa-2 pa-md-3" CellClassFunc="@_userReviewLeaderboardClassFunc">
                            <CellTemplate>
                                <MudText Style="font-weight:bold" Typo="Typo.subtitle1">@context.Item.ReviewsNumber</MudText>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            }
        }
    }
</MudContainer>

@code {
    [Inject] private AuthenticationStateProvider AuthenticationState { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }
    [Inject] private ILeaderboardService LeaderboardService { get; set; }
    [Inject] private IUserService UserService { get; set; }

    private List<UserLeaderboardDisplay>? Users { get; set; } = null;
    private List<UserReviewLeaderboardDisplay>? ReviewUsers { get; set; } = null;

    private ApplicationUser User;
    private int CurrentPage;
    private int Ranking;
    private int Pages;
    private bool IsLoading = true;
    private bool IsReviews = false;
    private string UserId = string.Empty;
    private TimeSpan LoadTime = TimeSpan.Zero;
    private int _boundaryCount = 1;
    private Size _paginationSize = Size.Medium;

    protected override async Task OnInitializedAsync()
    {
        var startTime = DateTime.UtcNow;
        var AuthSate = await AuthenticationState.GetAuthenticationStateAsync();

        if (!AuthSate.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("Account/Login");
        }

        var claims = AuthSate.User;
        UserId = claims.FindFirstValue(ClaimTypes.NameIdentifier);
        User = await UserService.GetUserById(UserId);

        if (IsReviews)
        {
            await FilterReviews();
        }
        else
        {
            Ranking = await LeaderboardService.GetUserRanking(UserId);

            CurrentPage = ((Ranking - 1) / PagingConstants.LeaderboardPageSize) + 1;
            await LoadPagination(CurrentPage);
        }

        Pages = await LeaderboardService.GetTotalPages();
        LoadTime = DateTime.UtcNow - startTime;
        IsLoading = false;
    }

    protected async Task LoadPagination(int pageNumber)
    {
        IsLoading = true;

        var incomingUsers = await LeaderboardService.GetUsersForLeaderboard(pageNumber);

        CurrentPage = pageNumber;
        Users = incomingUsers.ToList();

        IsLoading = false;
    }

    protected async Task FilterReviews()
    {
        if (!IsReviews)
        {
            IsReviews = true;

            var incomingUsers = await LeaderboardService.GetUserForReviewLeaderboard();
            ReviewUsers = incomingUsers.ToList();
        }
        else
        {
            IsReviews = false;
            await LoadPagination(CurrentPage);
        }
    }

    private Func<UserLeaderboardDisplay, string> _userLeaderboardClassFunc => user =>
    {
        string classNames = "pa-2 pa-md-3";
        return user.Id == UserId ? $"{classNames} mud-theme-primary" : classNames;
    };

    private Func<UserReviewLeaderboardDisplay, string> _userReviewLeaderboardClassFunc => user =>
    {
        string classNames = "pa-2 pa-md-3";
        return user.Id == UserId ? $"{classNames} mud-theme-primary" : classNames;
    };

    private void BreakpointChanged(Breakpoint breakpoint)
    {
        if (breakpoint < Breakpoint.Sm)
        {
            _paginationSize = Size.Small;
            _boundaryCount = 1;
        }
        else
        {
            _paginationSize = Size.Medium;
            _boundaryCount = 2;
        }
    }
}
