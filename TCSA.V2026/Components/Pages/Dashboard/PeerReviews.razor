@page "/dashboard/reviews"
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using TCSA.V2026.Data.Curriculum
@using TCSA.V2026.Data.DTOs
@using TCSA.V2026.Data.Models
@using TCSA.V2026.Data.Models.Responses
@using TCSA.V2026.Components.UI
@using TCSA.V2026.Helpers
@using TCSA.V2026.Services
@attribute [Authorize]

<PageTitle>Peer Reviews</PageTitle>

<MudContainer Class="pa-0">

    @if (User != null)
    {
        <DashboardToolBar User=@User></DashboardToolBar>
    }

    @if (IsLoading)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        if(User != null && (int)User.Level >= (int)Level.Yellow) 
        {
        <MudText>LoadTime: @LoadTime.TotalSeconds.ToString()</MudText>
        if (AvailableProjects != null && AvailableProjects.Count > 0)
        {
            @foreach (var project in AvailableProjects)
            {
                <MudCard Class="mt-1 mb-1">
                    <MudCardHeader>
                        <CardHeaderAvatar>
                            <MudImage ObjectFit="ObjectFit.Contain" Width="40" Src="@($"img/icons/{project.IconUrl}")" Alt="..." />
                        </CardHeaderAvatar>
                        <CardHeaderContent>
                            <MudGrid Style="align-self: flex-start;">
                                <MudItem xs="2">
                                    <MudText Style="@($"font-weight:bolder; color:{Colors.DeepPurple.Lighten1}")">@project.Title</MudText>
                                </MudItem>
                                <MudItem xs="2">
                                    <MudText>@project.Name</MudText>
                                </MudItem>
                                <MudItem xs="5">
                                    <MudText Style="@(project.DurationOpen.TotalDays > 7 ? "color: red" : "")">
                                        @TimeSpanFormatter.FormatDurationOpen(project.DurationOpen)
                                    </MudText>
                                </MudItem>
                                <MudItem xs="2">
                                    @if (!project.IsAssigned)
                                    {
                                        <MudButton Size="@Size.Small"
                                                   Variant="@Variant.Filled"
                                                   Color="@Color.Primary"
                                                   OnClick="@(() => AssignMyself(project.DashboardProjectId))"
                                                   StartIcon="fas fa-hand-point-up">
                                            Pick
                                        </MudButton>
                                    }
                                    else
                                    {
                                        <MudButton Size="@Size.Small"
                                                   Variant="@Variant.Filled"
                                                   Color="@Color.Error"
                                                   OnClick="@(() => ReleaseMyself(project.DashboardProjectId))"
                                                   StartIcon="@Icons.Material.Filled.Close">
                                            Drop
                                        </MudButton>
                                        <MudButton Size="@Size.Small"
                                                   Variant="@Variant.Filled"
                                                   Color="@Color.Success"
                                                   OnClick="@(() => MarkAsComplete(project.DashboardProjectId, project.AppUserId))"
                                                   StartIcon="@Icons.Material.Filled.ThumbUp">
                                            Tick
                                        </MudButton>
                                    }
                                </MudItem>
                                <MudItem xs="1">
                                    <MudButton Size="@Size.Small"
                                               Variant="@Variant.Filled"
                                               Color="@Color.Warning"
                                               OnClick="@(() => JS.InvokeVoidAsync("window.open", project.GithubUrl, "_blank", "noopener,noreferrer"))"
                                               StartIcon="fas fa-eye">
                                        View
                                    </MudButton>
                                </MudItem>
                            </MudGrid>
                        </CardHeaderContent>
                    </MudCardHeader>
                </MudCard>
                }
            }
        }
        else
        {
            <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" >
            <MudText  Typo="@Typo.h3"><MudIcon Size="Size.Large"  Icon="@Icons.Material.Outlined.Block" Color="Color.Error"></MudIcon>Not yet. Unlock <MudText Typo="Typo.h3" Color="Color.Warning">Yellow Belt</MudText> to open this area</MudText>
            </MudStack>
        }
    }
</MudContainer>

@code {
    [Inject] private NavigationManager Navigation { get; set; }
    [Inject] private AuthenticationStateProvider AuthenticationState { get; set; }
    [Inject] private IProjectService ProjectService { get; set; }
    [Inject] private IUserService UserService { get; set; }
    [Inject] private IPeerReviewService PeerReviewService { get; set; }
    [Inject] private ISnackbar Snackbar { get; set; }
    [Inject] private IJSRuntime JS { get; set; }

    private List<Project>? projects;
    private List<PeerReviewDisplay> AvailableProjects;
    private ApplicationUser User;

    private bool IsLoading = true;
    private string UserId = string.Empty;
    private TimeSpan LoadTime;

    protected override async Task OnInitializedAsync()
    {
        var startTime = DateTime.UtcNow;
        var authSate = await AuthenticationState.GetAuthenticationStateAsync();

        if (!authSate.User.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("Account/Login");
        }

        var claims = authSate.User;
        UserId = claims.FindFirstValue(ClaimTypes.NameIdentifier);
        User = await UserService.GetUserById(UserId);

        AvailableProjects = await PeerReviewService.GetProjectsForPeerReview(UserId);
        LoadTime = DateTime.UtcNow - startTime;

        IsLoading = false;
    }

    private async Task AssignMyself(int dashboardProjectId)
    {
        var result = await PeerReviewService.AssignUserToCodeReview(UserId, dashboardProjectId);

        if (result.Status == ResponseStatus.Success)
        {
            Snackbar.Add("Assignment Successful", Severity.Success);
            User = await UserService.GetUserById(UserId);
        }
        else
        {
            Snackbar.Add($"Error: {result.Message}", Severity.Error);
        }

        AvailableProjects = await PeerReviewService.GetProjectsForPeerReview(UserId);
    }

    private async Task ReleaseMyself(int dashboardProjectId)
    {
        var result = await PeerReviewService.ReleaseUserFromCodeReview(UserId, dashboardProjectId);

        if (result.Status == ResponseStatus.Success)
        {
            Snackbar.Add("Release successful", Severity.Success);
            User = await UserService.GetUserById(UserId);
        }
        else
        {
            Snackbar.Add($"Error: {result.Message}", Severity.Error);
        }

        AvailableProjects = await PeerReviewService.GetProjectsForPeerReview(UserId);
    }

    private async Task MarkAsComplete(int dashboardProjectId, string reviewerId)
    {
        var result = await PeerReviewService.MarkCodeReviewAsCompleted(UserId, dashboardProjectId, reviewerId);

        if (result.Status == ResponseStatus.Success)
        {
            Snackbar.Add("Successfully marked as complete", Severity.Success);
            User = await UserService.GetUserById(UserId);
        }
        else
        {
            Snackbar.Add($"Error: {result.Message}", Severity.Error);
        }

        AvailableProjects = await PeerReviewService.GetProjectsForPeerReview(UserId);
    }
}
