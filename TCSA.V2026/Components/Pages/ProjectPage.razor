@page "/project/{ProjectId:int}/{ProjectSlug}"
@using System.Security.Claims
@using TCSA.V2026.Data.Curriculum
@using TCSA.V2026.Data.Models
@using TCSA.V2026.Data.Models.Responses
@using TCSA.V2026.Services
@using static TCSA.V2026.Helpers.Enums

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>@Project.Title</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium">
    @if (IsLoading)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    } 
    else
    {
        <MudPaper Class="jumbotron d-flex align-center justify-center mt-3"
        Style=@GetBanner()>
            <div class="jumbotron-overlay">
                <h1 class="mud-typography-h3 text-white text-center">@Project.Title</h1>
            </div>
        </MudPaper>

        @if (IsLoggedIn && IsCompleted)
        {
            <MudAlert Class="mt-5" Severity="Severity.Success" Elevation="2">You have completed this roadmap step.</MudAlert>
        }

        <MudGrid Class="mt-1">
            <MudItem>
                <MudPaper Class="d-flex flex-column mud-width-full py-1 pb-10 px-10">
                    @if (Project.Introduction != null)
                    {
                        foreach (var paragraph in Project.Introduction)
                        {
                            <MudText Class="mt-2">@((MarkupString)(paragraph.Body))</MudText>
                        }
                    }
                    @if (Project.Id != 86)
                    {
                        <h2 class="mud-typography-h6 mt-10 mb-2">@Project.LanguageHeadings.Requirements</h2>
                        @if (!string.IsNullOrEmpty(Project.RequirementsIntro))
                        {
                            <MudText Class="mt-2">@((MarkupString)(Project.RequirementsIntro))</MudText>
                        }
                        @if (Project.Requirements != null)
                        {
                            <MudList ReadOnly="true" T="MarkupString" Color="Color.Default">
                                @foreach (var req in Project.Requirements)
                                {
                                    <MudListItem>
                                        <div style="display: flex;">
                                            <MudIcon Icon="@Icons.Material.Filled.CheckBox" Color="Color.Success" Class="mr-2" />
                                            <MudText>@((MarkupString)(req))</MudText>
                                        </div>
                                    </MudListItem>
                                }
                            </MudList>
                        }
                        @if (!string.IsNullOrEmpty(Project.RequirementsConclusion))
                        {
                            <MudText Class="mt-2">@((MarkupString)(Project.RequirementsConclusion))</MudText>
                        }
                    }
                    @if (Project.LearningItems != null)
                    {
                        <h2 class="mud-typography-h6 mt-10 mb-2">@Project.LanguageHeadings.Learn</h2>
                        @if (!string.IsNullOrEmpty(Project.LearningIntro))
                        {
                            <MudText Class="mt-2 mb-2">@((MarkupString)(Project.LearningIntro))</MudText>
                        }
                        <MudList Class="mt-2" T="MarkupString" Color="Color.Default">
                            @foreach (var item in Project.LearningItems)
                            {
                                <MudListItem>
                                    <MudText Class="mt-2">@((MarkupString)(item))</MudText>
                                </MudListItem>
                            }
                        </MudList>
                    }
                    @if (Project.Resources != null)
                    {
                        <h2 class="mud-typography-h6 mt-10 mb-2">@Project.LanguageHeadings.Resources</h2>
                        @if (!string.IsNullOrEmpty(Project.ResourcesIntro))
                        {
                            <MudText Class="mt-2 mb-2">@((MarkupString)(Project.ResourcesIntro))</MudText>
                        }
                        <MudList T="MarkupString" Color="Color.Default">
                            @foreach (var item in Project.Resources)
                            {
                                <MudListItem>
                                    <div style="display: flex;">
                                        <MudIcon Icon="@Icons.Material.Filled.ArrowCircleRight" Color="Color.Primary" Class="mr-2" />
                                        <MudText>@((MarkupString)(item))</MudText>
                                    </div>
                                </MudListItem>
                            }
                        </MudList>
                        @if (!string.IsNullOrEmpty(Project.ResourcesConclusion))
                        {
                            <MudText Class="mt-2">@((MarkupString)(Project.ResourcesConclusion))</MudText>
                        }
                    }
                    @if (Project.Tips != null)
                    {
                        <h2 class="mud-typography-h6 mt-10 mb-2">@Project.LanguageHeadings.Tips</h2>
                        <MudList T="MarkupString" Color="Color.Default">
                            @foreach (var tip in Project.Tips)
                            {
                                <MudListItem>
                                    <div style="display: flex;">
                                        <MudIcon Icon="@Icons.Material.Filled.CheckBox" Size="Size.Medium" Color="Color.Warning" Class="mr-2" />
                                        <MudText>@((MarkupString)(tip))</MudText>
                                    </div>
                                </MudListItem>
                            }
                        </MudList>
                    }

                    @if (Project.Challenges != null)
                    {
                        <h2 class="mud-typography-h6 mt-10 mb-2">@Project.LanguageHeadings.Challenges</h2>
                        <MudList T="MarkupString" Color="Color.Default">
                            @foreach (var challenge in Project.Challenges)
                            {
                                <MudListItem>
                                    <div style="display: flex;">
                                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Medium" Color="Color.Error" Class="mr-2" />
                                        <MudText>@((MarkupString)(challenge))</MudText>
                                    </div>
                                </MudListItem>
                            }
                        </MudList>
                    }
                    @if (Project.Blocks != null)
                    {
                        @foreach (var block in Project.Blocks)
                        {
                            @if (!string.IsNullOrWhiteSpace(block.Title))
                            {
                                <h2 class="mud-typography-h6 mt-10 mb-2">@block.Title</h2>

                            }

                            @foreach (var paragraph in block.Paragraphs)
                            {
                                if (paragraph.IsPicture)
                                {
                                    <MudPaper Class="d-flex justify-center mx-20 mt-10" Elevation="0">
                                        <MudImage Src="@GetImage(paragraph)" Alt="Image paragraph" Fluid="true" Class="rounded-lg" />
                                    </MudPaper>
                                }

                                else if (paragraph.IsVideo)
                                {
                                    <div class="video-wrapper mt-5 mb-4">
                                        <iframe class="video-iframe" src="@paragraph.VideoUrl" allowfullscreen></iframe>
                                    </div>
                                }

                                else if (paragraph.IsCode)
                                {
                                    <pre class="line-numbers"><code class="language-csharp">@((MarkupString)paragraph.Body)</code></pre>
                                }

                                else if (!string.IsNullOrEmpty(paragraph.Body))
                                {
                                    if (!string.IsNullOrWhiteSpace(paragraph.BackgroundColor))
                                    {
                                        var bgStyle = $"background-color: {paragraph.BackgroundColor}; padding: 1rem;";
                                        var textStyle = $"color: {paragraph.FontColor};";
                                        <MudText Class="mb-1" Style="@textStyle" Typo="Typo.body1">
                                            @((MarkupString)paragraph.Body)
                                        </MudText>
                                    }
                                    else
                                    {
                                        <MudText Class="mt-2" Typo="Typo.body1">
                                            @((MarkupString)paragraph.Body)
                                        </MudText>
                                    }
                                }
                            }
                        }
                    }

                    @if (Project.Screenshots != null)
                    {
                        <h2 class="mud-typography-h6 mt-10 mb-2">Example Screenshots</h2>
                        @if (Project.Screenshots.Count == 1)
                        {
                            <MudPaper Class="d-flex justify-center mx-20" Elevation="0">
                                <MudImage Src="@($"img/{Project.Screenshots[0]}")" Fluid="true" Class="rounded-lg" />
                            </MudPaper>
                        }
                        else if (Project.Screenshots.Count > 1)
                        {
                            <MudCarousel Style="height: 350px;" ShowArrows EnableSwipeGesture ItemsSource="Project.Screenshots" AutoCycle="false">
                                <ItemTemplate>
                                    <div class="d-flex justify-center" style="height: 100%;">
                                        <MudImage Src="@($"img/{context}")"
                                                  Class="rounded-lg"
                                                  Style="max-height: 300px; max-width: 100%;" />
                                    </div>
                                </ItemTemplate>
                            </MudCarousel>
                        }
                    }

                    @if (!string.IsNullOrEmpty(Project.RepositoryLink))
                    {
                        <MudGrid Class="pb-5 mt-5">
                            <MudItem xs="12" sm="2" Class="d-flex align-items-center justify-center">
                                <MudHidden Breakpoint="Breakpoint.SmAndDown">
                                    <MudImage Src="img/github.png" Width="70" Alt="GitHub logo" Class="align-middle" />
                                </MudHidden>
                            </MudItem>

                            <MudItem xs="12" sm="10">
                                <h2 class="mud-typography-h5 mb-2">@Project.LanguageHeadings.ReviewRepository</h2>

                                <MudLink Href="@Project.RepositoryLink" Target="_blank">
                                    @Project.RepositoryLink
                                </MudLink>
                            </MudItem>
                        </MudGrid>
                    }

                    @if (IsLoggedIn && Project.Area == Area.SQL && !IsCompleted)
                    {
                        @if (CodeWarsNotFoundShowing)
                        {
                            <h2 class="mud-typography-h6 mt-10 mb-2">You haven't integrated Codewars yet.</h2>
                            <MudText Class="mt-10 mb-2" Typo="Typo.body1">
                                In The C# Academy's Dashboard, you'll see a button where you can insert your Codewars user name. Your input has to match Code War's username exactly, including case sensitivity, or we won't be able to track your results.

                                Once you have completed a challenge, refresh this page and you'll be able to see your progress so far at the bottom of the page. Once all challenges are finished, the project will be marked as completed automatically.
                            </MudText>
                        }
                        else
                        {
                            <h2 class="mud-typography-h6 mt-10 mb-2">Your Progress</h2>
                            <MudList T="MarkupString" Color="Color.Default">
                                @foreach (var challenge in Project.CodeWarsChallenges)
                                {
                                    <MudListItem>
                                        <div style="display: flex;">
                                            @if (challenge.IsCompleted)
                                            {
                                                <MudIcon Icon="@Icons.Material.Outlined.CheckBox" Size="Size.Medium" Color="Color.Success" Class="mr-2" />
                                            }
                                            else
                                            {
                                                <MudIcon Icon="@Icons.Material.Outlined.CheckBoxOutlineBlank" Size="Size.Medium" Color="Color.Warning" Class="mr-2" />
                                            }
                                            <MudText>@((MarkupString)(challenge.Name))</MudText>
                                        </div>
                                    </MudListItem>
                                }
                            </MudList>
                        }
                    }
                </MudPaper>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    [Inject] private AuthenticationStateProvider AuthenticationState { get; set; }
    [Inject] private IProjectService ProjectService { get; set; }
    [Inject] private ICodewarsService CodewarsService { get; set; }
    [Inject] private IJSRuntime JS { get; set; }

    [Parameter] public string ProjectSlug { get; set; }
    [Parameter] public int ProjectId { get; set; }

    private Project Project { get; set; }

    private bool IsLoggedIn = false;
    private bool IsCompleted = false;
    private bool IsLoading = false;
    private bool IsPendingReview = false;
    private ProjectStatus Status { get; set; } = ProjectStatus.None;

    private string UserId = string.Empty;
    private bool CodeWarsNotFoundShowing = false;

    protected async override Task OnInitializedAsync()
    {
        await OnParametersSetAsync();
    }

    private string GetBanner()
    {
        var banner = string.IsNullOrEmpty(Project.BannerUrl) ? "article-banner.jpg" : Project.BannerUrl;
        return $"position: relative; height: 350px; background-image: url('/img/banners/{banner}'); background-size: cover; background-position: center;";
    }

    private async Task CheckCodeWars()
    {
        try
        {
            IsCompleted = await ProjectService.IsProjectCompleted(UserId, ProjectId);

            var challengesResult = await CodewarsService.GetCodeWarsCompletedChallenges(UserId, Project.CodeWarsChallenges);

            Project.CodeWarsChallenges = challengesResult.Challenges;

            if (challengesResult.Status == ResponseStatus.Fail)
            {
                CodeWarsNotFoundShowing = true;
            }

            if (challengesResult.Status == ResponseStatus.Success
                && !IsCompleted
                && !Project.CodeWarsChallenges.Any(x => x.IsCompleted == false))
            {
                await CodewarsService.MarkSqlProjectAsCompleted(Project.Id, UserId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private string GetImage(Paragraph paragraph) => $"img/{paragraph.PictureUrl}";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("highlightCode");
        }

        var AuthSate = await AuthenticationState.GetAuthenticationStateAsync();
    }

    protected async override Task OnParametersSetAsync()
    {
        Project = ProjectHelper.GetProjects().Single(x => x.Id == ProjectId);

        var AuthSate = await AuthenticationState.GetAuthenticationStateAsync();

        if (AuthSate.User.Identity.IsAuthenticated)
        {
            IsLoggedIn = true;
            var claims = AuthSate.User;
            UserId = claims.FindFirstValue(ClaimTypes.NameIdentifier);

            IsCompleted = await ProjectService.IsProjectCompleted(UserId, ProjectId);
        }

        if (!IsCompleted && Project.Area == Area.SQL)
        {
            await CheckCodeWars();
        }

        IsLoading = false;
    }
}

<style>
    a {
        color: #1976d2; /* Material blue */
    }
</style>