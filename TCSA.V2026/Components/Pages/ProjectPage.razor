@page "/project/{ProjectId:int}/{ProjectSlug}"
@using System.Security.Claims
@using TCSA.V2026.Data.Curriculum
@using TCSA.V2026.Data.Models
@using TCSA.V2026.Services
@using static TCSA.V2026.Helpers.Enums

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>@Project.Title</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudPaper Class="jumbotron d-flex align-center justify-center mt-3" Style="position: relative; height: 250px; background-image: url('/img/banners/article-banner.jpg'); background-size: cover; background-position: center;">
        <div class="jumbotron-overlay">
            <MudText Typo="Typo.h3" Class="text-white text-center">@Project.Title</MudText>
        </div>
    </MudPaper>
    @if (IsLoading)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }

    @if (IsLoggedIn && IsCompleted)
    {
        <MudAlert Class="mt-5" Severity="Severity.Success" Elevation="2">You have completed this roadmap step.</MudAlert>
    }

    <MudGrid Class="mt-1">
        <MudItem>
            <MudPaper Class="d-flex flex-column mud-width-full py-1 pb-10 px-10">
                @if (Project.Introduction != null)
                {
                    foreach (var paragraph in Project.Introduction)
                    {
                        <MudText Class="mt-2">@((MarkupString)(paragraph.Body))</MudText>
                    }
                }
                @if (Project.Id != 86)
                {
                    <MudText Class="mt-10 mb-2" Typo="Typo.h6">@Project.LanguageHeadings.Requirements</MudText>
                    @if (!string.IsNullOrEmpty(Project.RequirementsIntro))
                    {
                        <MudText Class="mt-2">@((MarkupString)(Project.RequirementsIntro))</MudText>
                    }
                    @if (Project.Requirements != null)
                    {
                        <MudList ReadOnly="true" T="MarkupString">
                            @foreach (var req in Project.Requirements)
                            {
                                <MudListItem>
                                    <div style="display: flex;">
                                        <MudIcon Icon="@Icons.Material.Filled.CheckBox" Color="Color.Success" Class="mr-2" />
                                        <MudText Style="color: black;">@((MarkupString)(req))</MudText>
                                    </div>
                                </MudListItem>
                            }
                        </MudList>
                    }
                }
                @if (Project.LearningItems != null)
                {
                    <MudText Class="mt-10 mb-2" Typo="Typo.h6">@Project.LanguageHeadings.Learn</MudText>
                    @if (!string.IsNullOrEmpty(Project.LearningIntro))
                    {
                        <MudText Class="mt-2 mb-2">@((MarkupString)(Project.LearningIntro))</MudText>
                    }
                    <MudList Class="mt-2" T="MarkupString">
                        @foreach (var item in Project.LearningItems)
                        {
                            <MudListItem>
                                <MudText Style="color: black;" Class="mt-2">@((MarkupString)(item))</MudText>
                            </MudListItem>
                        }
                    </MudList>
                }
                @if (Project.Resources != null)
                {
                    <MudText Class="mt-10 mb-2" Typo="Typo.h6">@Project.LanguageHeadings.Resources</MudText>
                    @if (!string.IsNullOrEmpty(Project.ResourcesIntro))
                    {
                        <MudText Class="mt-2 mb-2">@((MarkupString)(Project.ResourcesIntro))</MudText>
                    }
                    <MudList T="MarkupString">
                        @foreach (var item in Project.Resources)
                        {
                            <MudListItem>
                                <div style="display: flex;">
                                    <MudIcon Icon="@Icons.Material.Filled.ArrowCircleRight" Color="Color.Primary" Class="mr-2" />
                                    <MudText Style="color: black;">@((MarkupString)(item))</MudText>
                                </div>
                            </MudListItem>
                        }
                    </MudList>
                    @if (!string.IsNullOrEmpty(Project.ResourcesConclusion))
                    {
                        <MudText Class="mt-2">@((MarkupString)(Project.ResourcesConclusion))</MudText>
                    }
                }
                @if (Project.Tips != null)
                {
                    <MudText Class="mt-10 mb-2" Typo="Typo.h6">@Project.LanguageHeadings.Tips</MudText>
                    <MudList T="MarkupString">
                        @foreach (var tip in Project.Tips)
                        {
                            <MudListItem>
                                <div style="display: flex;">
                                    <MudIcon Icon="@Icons.Material.Filled.CheckBox" Size="Size.Medium" Color="Color.Warning" Class="mr-2" />
                                    <MudText Style="color: black;">@((MarkupString)(tip))</MudText>
                                </div>
                            </MudListItem>
                        }
                    </MudList>
                }
                @if (Project.Challenges != null)
                {
                    <MudText Class="mt-10 mb-2" Typo="Typo.h6">@Project.LanguageHeadings.Challenges</MudText>
                    <MudList T="MarkupString">
                        @foreach (var challenge in Project.Challenges)
                        {
                            <MudListItem>
                                <div style="display: flex;">
                                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Medium" Color="Color.Error" Class="mr-2" />
                                    <MudText Style="color: black;">@((MarkupString)(challenge))</MudText>
                                </div>
                            </MudListItem>
                        }
                    </MudList>
                }
                @if (Project.Blocks != null)
                {
                    @foreach (var block in Project.Blocks)
                    {
                        @if (!string.IsNullOrWhiteSpace(block.Title))
                        {
                            <MudText Typo="Typo.h6" Class="mt-10 mb-2">@block.Title</MudText>
                        }

                        @foreach (var paragraph in block.Paragraphs)
                        {
                            if (paragraph.IsPicture)
                            {
                                <MudPaper Class="d-flex justify-center mx-20 mt-10" Elevation="0">
                                    <MudImage Src="@GetImage(paragraph)" Alt="Image paragraph" Fluid="true" Class="rounded-lg" />
                                </MudPaper>
                            }

                            else if (paragraph.IsVideo)
                            {
                                <div class="video-wrapper mt-5 mb-4">
                                    <iframe class="video-iframe" src="@paragraph.VideoUrl" allowfullscreen></iframe>
                                </div>
                            }

                            else if (paragraph.IsCode)
                            {
                                <pre class="line-numbers"><code class="language-csharp">@((MarkupString)paragraph.Body)</code></pre>
                            }

                            else if (!string.IsNullOrEmpty(paragraph.Body))
                            {
                                if (!string.IsNullOrWhiteSpace(paragraph.BackgroundColor))
                                {
                                    var bgStyle = $"background-color: {paragraph.BackgroundColor}; padding: 1rem;";
                                    var textStyle = $"color: {paragraph.FontColor};";
                                    <MudText Class="mb-1" Style="@textStyle" Typo="Typo.body1">
                                        @((MarkupString)paragraph.Body)
                                    </MudText>
                                }
                                else
                                {
                                    <MudText Class="mt-2" Typo="Typo.body1">
                                        @((MarkupString)paragraph.Body)
                                    </MudText>
                                }
                            }
                        }
                    }
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [Inject] private AuthenticationStateProvider AuthenticationState { get; set; }
    [Inject] private IProjectService ProjectService { get; set; }
    [Inject] private IJSRuntime JS { get; set; }

    [Parameter] public string ProjectSlug { get; set; }
    [Parameter] public int ProjectId { get; set; }

    private Project Project { get; set; }

    private bool IsLoggedIn = false;
    private bool IsCompleted = false;
    private bool IsLoading = false;
    private bool IsPendingReview = false;
    private ProjectStatus Status { get; set; } = ProjectStatus.None;

    private string UserId = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        await OnParametersSetAsync();
    }

    private string GetImage(Paragraph paragraph) => $"img/{paragraph.PictureUrl}";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("highlightCode");
        }

        var AuthSate = await AuthenticationState.GetAuthenticationStateAsync();
    }

    protected async override Task OnParametersSetAsync()
    {
        Project = ProjectHelper.GetProjects().Single(x => x.Id == ProjectId);

        var AuthSate = await AuthenticationState.GetAuthenticationStateAsync();

        if (AuthSate.User.Identity.IsAuthenticated)
        {
            IsLoggedIn = true;
            var claims = AuthSate.User;
            UserId = claims.FindFirstValue(ClaimTypes.NameIdentifier);

            IsCompleted = await ProjectService.IsProjectCompleted(UserId, ProjectId);
        }

        IsLoading = false;
    }
}

<style>
    a {
        color: #1976d2; /* Material blue */
    }
</style>