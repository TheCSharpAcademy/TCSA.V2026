@using TCSA.V2026.Data.DTOs
@using TCSA.V2026.Data.Models
@using TCSA.V2026.Data.Models.Responses
@using TCSA.V2026.Helpers
@using TCSA.V2026.Services

@inject IDialogService DialogService

<MudDialog Style="max-width: 800px;">
    <DialogContent>
        @foreach (var task in Tasks)
        {
            <MudCard Class="mt-1 mb-1" Style="@GetStyle(task.Status)">
                <MudCardHeader Class="d-flex align-items-center flex-wrap">
                    <CardHeaderAvatar>
                        <MudImage Width="40" Src="@($"img/icons/{task.IconUrl}")" />
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Color="Color.Primary" Typo="Typo.h6" NoWrap="true">@task.Title</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudBreakpointProvider OnBreakpointChanged="BreakpointChanged">
                            @if (task.Status == Data.DTOs.TaskStatus.Completed)
                            {
                                <MudChip Class="ml-5 mt-5"
                                         T="string"
                                         Size="@_chipSize"
                                         Color="Color.Success">
                                    Completed
                                </MudChip>
                            }
                            @if (task.Area != Area.SQL && task.Status != Data.DTOs.TaskStatus.Completed && !task.IsReadOnly)
                            {
                                var color = task.Status == Data.DTOs.TaskStatus.PendingReview ? Color.Warning : Color.Success;
                                var text = task.Status == Data.DTOs.TaskStatus.PendingReview ? "Update" : "Submit";
                                var icon = task.Status == Data.DTOs.TaskStatus.PendingReview ? Icons.Material.Filled.Edit : Icons.Material.Filled.Send;
                                <MudButton Class="ml-5 mt-5"
                                           Size="@_buttonSize"
                                           Variant="@Variant.Filled" Color="@color"
                                           OnClick="@(() => SubmitToReviewDialog(task.Id))"
                                           StartIcon="@icon">
                                    @text
                                </MudButton>
                            }
                            <MudButton Class="ml-5 mr-5 mt-5"
                                       Size="@_buttonSize"
                                       Variant="@Variant.Filled"
                                       OnClick="@(() => JS.InvokeVoidAsync("window.open", DashboardProjectsHelpers.GetUrl(task.Area, task.Id, task.Slug), "_blank", "noopener,noreferrer"))"
                                       Color="Color.Primary"
                                       StartIcon="fas fa-eye">
                                View
                            </MudButton>
                        </MudBreakpointProvider>
                    </CardHeaderActions>
                </MudCardHeader>
            </MudCard>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; }
    [Parameter] public int ProjectId { get; set; }
    [Parameter] public IEnumerable<DashboardTaskDisplay> Tasks { get; set; }
    [Parameter] public ApplicationUser User { get; set; }
    [Inject] private IJSRuntime JS { get; set; }

    private Size _chipSize = Size.Large;
    private Size _buttonSize = Size.Medium;
    private void Cancel() => MudDialog.Cancel();

    private async Task SubmitToReviewDialog(int projectId)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<TCSASubmitProjectDialog>
        {
            { p => p.ProjectId, projectId },
            { p => p.User, User }
        };
        var dialog = await DialogService.ShowAsync<TCSASubmitProjectDialog>("Submit Project", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var status = (ResponseStatus)result.Data;
            MudDialog.Close(DialogResult.Ok(status));
        }

    }

    private string GetStyle(Data.DTOs.TaskStatus status)
    {
        var style = "";
        if (status == Data.DTOs.TaskStatus.Completed)
        {
            style += "border: 2px solid green;";
        }
        if (status == Data.DTOs.TaskStatus.PendingReview)
        {
            style += "border: 2px solid orange;";
        }
        return style;
    }

    private void BreakpointChanged(Breakpoint breakpoint)
    {
        if (breakpoint < Breakpoint.Sm)
        {
            _chipSize = Size.Small;
            _buttonSize = Size.Small;
        }
        else
        {
            _chipSize = Size.Medium;
            _buttonSize = Size.Medium;
        }

        StateHasChanged();
    }
}
