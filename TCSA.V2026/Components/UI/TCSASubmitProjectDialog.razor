@using TCSA.V2026.Data.Models
@using TCSA.V2026.Data.Models.Responses
@using TCSA.V2026.Services
<MudDialog Style="min-width: 400px;">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Send" Class="mr-3 mb-n1" />
            @MudDialog.Title
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudText Typo="Typo.caption" Class="mb-1">
            Don't submit your own repository, <a href="https://thecsharpacademy.com/article/52/code-reviews" target="_blank"><span style="color:red; !important">read this article</span></a> to find out how to create a pull request.
        </MudText>
        <MudTextField 
        @bind-Value="GithubUrl"
        Error="@HasError"
        ErrorText="@ErrorText"
        Immediate="true"
        OnBlur="ValidateUrl"
        Label=@(ProjectId == 75 ? "Freecodecamp URL" : "GithubUrl") />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Disabled="HasError" Color="Color.Error" OnClick="Submit">Submit</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Inject] protected ICommunityService CommunityService { get; set; }
    [Inject] protected IProjectService ProjectService { get; set; }
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; }
    [Parameter] public int ProjectId { get; set; }
    [Parameter] public bool IsIssue { get; set; }
    [Parameter] public bool IsUpdate { get; set; }
    [Parameter] public ApplicationUser User { get; set; }

    public string GithubUrl = string.Empty;
    private string ErrorText;
    private bool HasError;

    private string RequiredPrefix = "https://github.com/TheCSharpAcademy/CodeReviews";

    protected override void OnParametersSet()
    {
        GithubUrl = User.DashboardProjects.FirstOrDefault(p => p.ProjectId == ProjectId)?.GithubUrl ?? string.Empty;
    }

    private void ValidateUrl()
    {
        if (ProjectId == (int)ArticleName.Portfolio || ProjectId == (int)ArticleName.Resume)
        {
            HasError = false;
            return;
        }

        if (ProjectId == (int)ArticleName.FreecodeCamp)
        {
            RequiredPrefix = "https://www.freecodecamp.org/certification/";
        }

        if (string.IsNullOrWhiteSpace(GithubUrl))
        {
            HasError = true;
            ErrorText = "URL is required.";
        }
        else if (!IsIssue && !GithubUrl.StartsWith(RequiredPrefix, StringComparison.OrdinalIgnoreCase))
        {
            var errorText = ProjectId == 75 ? $"URL must start with '{RequiredPrefix}'. We need to see your certificate." : $"URL must start with '{RequiredPrefix}'. Read the article above to submit a pull request.";

            HasError = true;
            ErrorText = errorText;
        }
        else
        {
            HasError = false;
            ErrorText = string.Empty;
        }
    }

    private async Task Submit() 
    {
        ValidateUrl(); 
        if (HasError)
            return;

        var result = new BaseResponse();
        if (IsIssue)
        {
            result = await CommunityService.SubmitIssueToReview(ProjectId, GithubUrl);
        } 
        else
        {
            result = await ProjectService.PostArticle(ProjectId, User.Id, GithubUrl, false, IsUpdate);
        }

        MudDialog.Close(DialogResult.Ok(result.Status));
    }
    
    private void Cancel() => MudDialog.Cancel();
}
